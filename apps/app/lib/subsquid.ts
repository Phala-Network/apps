/* eslint-disable */
/* This file is generated by graphql-codegen, don't edit it directly. */
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, useInfiniteQuery, UseQueryOptions, UseInfiniteQueryOptions } from '@tanstack/react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

function fetcher<TData, TVariables extends { [key: string]: any }>(client: GraphQLClient, query: string, variables?: TVariables, requestHeaders?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request({
    document: query,
    variables,
    requestHeaders
  });
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Big number decimal */
  BigDecimal: string;
  /** Big number integer */
  BigInt: string;
  /** A date-time string in simplified extended ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ) */
  DateTime: string;
};

export type Account = {
  __typename?: 'Account';
  basePool?: Maybe<BasePool>;
  /** account address */
  id: Scalars['String'];
  identityDisplay?: Maybe<Scalars['String']>;
  identityLevel?: Maybe<IdentityLevel>;
  ownedPools: Array<BasePool>;
  stakePoolNftCount: Scalars['Int'];
  stakePoolOwnerReward: Scalars['BigDecimal'];
  stakePoolValue: Scalars['BigDecimal'];
  vaultNftCount: Scalars['Int'];
  vaultValue: Scalars['BigDecimal'];
};


export type AccountOwnedPoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};

export type AccountEdge = {
  __typename?: 'AccountEdge';
  cursor: Scalars['String'];
  node: Account;
};

export enum AccountOrderByInput {
  BasePoolCidAsc = 'basePool_cid_ASC',
  BasePoolCidDesc = 'basePool_cid_DESC',
  BasePoolCommissionAsc = 'basePool_commission_ASC',
  BasePoolCommissionDesc = 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc = 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc = 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc = 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc = 'basePool_freeValue_DESC',
  BasePoolIdAsc = 'basePool_id_ASC',
  BasePoolIdDesc = 'basePool_id_DESC',
  BasePoolKindAsc = 'basePool_kind_ASC',
  BasePoolKindDesc = 'basePool_kind_DESC',
  BasePoolPidAsc = 'basePool_pid_ASC',
  BasePoolPidDesc = 'basePool_pid_DESC',
  BasePoolReleasingValueAsc = 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc = 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc = 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc = 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc = 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc = 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc = 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc = 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc = 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc = 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawalSharesAsc = 'basePool_withdrawalShares_ASC',
  BasePoolWithdrawalSharesDesc = 'basePool_withdrawalShares_DESC',
  BasePoolWithdrawalValueAsc = 'basePool_withdrawalValue_ASC',
  BasePoolWithdrawalValueDesc = 'basePool_withdrawalValue_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IdentityDisplayAsc = 'identityDisplay_ASC',
  IdentityDisplayDesc = 'identityDisplay_DESC',
  IdentityLevelAsc = 'identityLevel_ASC',
  IdentityLevelDesc = 'identityLevel_DESC',
  StakePoolNftCountAsc = 'stakePoolNftCount_ASC',
  StakePoolNftCountDesc = 'stakePoolNftCount_DESC',
  StakePoolOwnerRewardAsc = 'stakePoolOwnerReward_ASC',
  StakePoolOwnerRewardDesc = 'stakePoolOwnerReward_DESC',
  StakePoolValueAsc = 'stakePoolValue_ASC',
  StakePoolValueDesc = 'stakePoolValue_DESC',
  VaultNftCountAsc = 'vaultNftCount_ASC',
  VaultNftCountDesc = 'vaultNftCount_DESC',
  VaultValueAsc = 'vaultValue_ASC',
  VaultValueDesc = 'vaultValue_DESC'
}

export type AccountWhereInput = {
  AND?: InputMaybe<Array<AccountWhereInput>>;
  OR?: InputMaybe<Array<AccountWhereInput>>;
  basePool?: InputMaybe<BasePoolWhereInput>;
  basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  identityDisplay_contains?: InputMaybe<Scalars['String']>;
  identityDisplay_containsInsensitive?: InputMaybe<Scalars['String']>;
  identityDisplay_endsWith?: InputMaybe<Scalars['String']>;
  identityDisplay_eq?: InputMaybe<Scalars['String']>;
  identityDisplay_gt?: InputMaybe<Scalars['String']>;
  identityDisplay_gte?: InputMaybe<Scalars['String']>;
  identityDisplay_in?: InputMaybe<Array<Scalars['String']>>;
  identityDisplay_isNull?: InputMaybe<Scalars['Boolean']>;
  identityDisplay_lt?: InputMaybe<Scalars['String']>;
  identityDisplay_lte?: InputMaybe<Scalars['String']>;
  identityDisplay_not_contains?: InputMaybe<Scalars['String']>;
  identityDisplay_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  identityDisplay_not_endsWith?: InputMaybe<Scalars['String']>;
  identityDisplay_not_eq?: InputMaybe<Scalars['String']>;
  identityDisplay_not_in?: InputMaybe<Array<Scalars['String']>>;
  identityDisplay_not_startsWith?: InputMaybe<Scalars['String']>;
  identityDisplay_startsWith?: InputMaybe<Scalars['String']>;
  identityLevel_eq?: InputMaybe<IdentityLevel>;
  identityLevel_in?: InputMaybe<Array<IdentityLevel>>;
  identityLevel_isNull?: InputMaybe<Scalars['Boolean']>;
  identityLevel_not_eq?: InputMaybe<IdentityLevel>;
  identityLevel_not_in?: InputMaybe<Array<IdentityLevel>>;
  ownedPools_every?: InputMaybe<BasePoolWhereInput>;
  ownedPools_none?: InputMaybe<BasePoolWhereInput>;
  ownedPools_some?: InputMaybe<BasePoolWhereInput>;
  stakePoolNftCount_eq?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_gt?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_gte?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakePoolNftCount_isNull?: InputMaybe<Scalars['Boolean']>;
  stakePoolNftCount_lt?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_lte?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_not_eq?: InputMaybe<Scalars['Int']>;
  stakePoolNftCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakePoolOwnerReward_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_gt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_gte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePoolOwnerReward_isNull?: InputMaybe<Scalars['Boolean']>;
  stakePoolOwnerReward_lt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_lte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolOwnerReward_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePoolValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePoolValue_isNull?: InputMaybe<Scalars['Boolean']>;
  stakePoolValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vaultNftCount_eq?: InputMaybe<Scalars['Int']>;
  vaultNftCount_gt?: InputMaybe<Scalars['Int']>;
  vaultNftCount_gte?: InputMaybe<Scalars['Int']>;
  vaultNftCount_in?: InputMaybe<Array<Scalars['Int']>>;
  vaultNftCount_isNull?: InputMaybe<Scalars['Boolean']>;
  vaultNftCount_lt?: InputMaybe<Scalars['Int']>;
  vaultNftCount_lte?: InputMaybe<Scalars['Int']>;
  vaultNftCount_not_eq?: InputMaybe<Scalars['Int']>;
  vaultNftCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vaultValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vaultValue_isNull?: InputMaybe<Scalars['Boolean']>;
  vaultValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type AccountsConnection = {
  __typename?: 'AccountsConnection';
  edges: Array<AccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type BasePool = {
  __typename?: 'BasePool';
  account: Account;
  /** NFT collection id */
  cid: Scalars['Int'];
  /** decimal percentage, 1 means 100% */
  commission: Scalars['BigDecimal'];
  delegations: Array<Delegation>;
  delegatorCount: Scalars['Int'];
  freeValue: Scalars['BigDecimal'];
  /** pid */
  id: Scalars['String'];
  kind: BasePoolKind;
  owner: Account;
  /** numeric pid for sorting */
  pid: Scalars['BigInt'];
  releasingValue: Scalars['BigDecimal'];
  sharePrice: Scalars['BigDecimal'];
  stakePool?: Maybe<StakePool>;
  totalShares: Scalars['BigDecimal'];
  totalValue: Scalars['BigDecimal'];
  vault?: Maybe<Vault>;
  whitelistEnabled: Scalars['Boolean'];
  whitelists: Array<BasePoolWhitelist>;
  withdrawalShares: Scalars['BigDecimal'];
  withdrawalValue: Scalars['BigDecimal'];
};


export type BasePoolDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


export type BasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};

export type BasePoolEdge = {
  __typename?: 'BasePoolEdge';
  cursor: Scalars['String'];
  node: BasePool;
};

export enum BasePoolKind {
  StakePool = 'StakePool',
  Vault = 'Vault'
}

export enum BasePoolOrderByInput {
  AccountIdAsc = 'account_id_ASC',
  AccountIdDesc = 'account_id_DESC',
  AccountIdentityDisplayAsc = 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc = 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc = 'account_identityLevel_ASC',
  AccountIdentityLevelDesc = 'account_identityLevel_DESC',
  AccountStakePoolNftCountAsc = 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc = 'account_stakePoolNftCount_DESC',
  AccountStakePoolOwnerRewardAsc = 'account_stakePoolOwnerReward_ASC',
  AccountStakePoolOwnerRewardDesc = 'account_stakePoolOwnerReward_DESC',
  AccountStakePoolValueAsc = 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc = 'account_stakePoolValue_DESC',
  AccountVaultNftCountAsc = 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc = 'account_vaultNftCount_DESC',
  AccountVaultValueAsc = 'account_vaultValue_ASC',
  AccountVaultValueDesc = 'account_vaultValue_DESC',
  CidAsc = 'cid_ASC',
  CidDesc = 'cid_DESC',
  CommissionAsc = 'commission_ASC',
  CommissionDesc = 'commission_DESC',
  DelegatorCountAsc = 'delegatorCount_ASC',
  DelegatorCountDesc = 'delegatorCount_DESC',
  FreeValueAsc = 'freeValue_ASC',
  FreeValueDesc = 'freeValue_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  OwnerIdAsc = 'owner_id_ASC',
  OwnerIdDesc = 'owner_id_DESC',
  OwnerIdentityDisplayAsc = 'owner_identityDisplay_ASC',
  OwnerIdentityDisplayDesc = 'owner_identityDisplay_DESC',
  OwnerIdentityLevelAsc = 'owner_identityLevel_ASC',
  OwnerIdentityLevelDesc = 'owner_identityLevel_DESC',
  OwnerStakePoolNftCountAsc = 'owner_stakePoolNftCount_ASC',
  OwnerStakePoolNftCountDesc = 'owner_stakePoolNftCount_DESC',
  OwnerStakePoolOwnerRewardAsc = 'owner_stakePoolOwnerReward_ASC',
  OwnerStakePoolOwnerRewardDesc = 'owner_stakePoolOwnerReward_DESC',
  OwnerStakePoolValueAsc = 'owner_stakePoolValue_ASC',
  OwnerStakePoolValueDesc = 'owner_stakePoolValue_DESC',
  OwnerVaultNftCountAsc = 'owner_vaultNftCount_ASC',
  OwnerVaultNftCountDesc = 'owner_vaultNftCount_DESC',
  OwnerVaultValueAsc = 'owner_vaultValue_ASC',
  OwnerVaultValueDesc = 'owner_vaultValue_DESC',
  PidAsc = 'pid_ASC',
  PidDesc = 'pid_DESC',
  ReleasingValueAsc = 'releasingValue_ASC',
  ReleasingValueDesc = 'releasingValue_DESC',
  SharePriceAsc = 'sharePrice_ASC',
  SharePriceDesc = 'sharePrice_DESC',
  StakePoolAprMultiplierAsc = 'stakePool_aprMultiplier_ASC',
  StakePoolAprMultiplierDesc = 'stakePool_aprMultiplier_DESC',
  StakePoolCapacityAsc = 'stakePool_capacity_ASC',
  StakePoolCapacityDesc = 'stakePool_capacity_DESC',
  StakePoolDelegableAsc = 'stakePool_delegable_ASC',
  StakePoolDelegableDesc = 'stakePool_delegable_DESC',
  StakePoolIdAsc = 'stakePool_id_ASC',
  StakePoolIdDesc = 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc = 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc = 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc = 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc = 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc = 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc = 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc = 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc = 'stakePool_workerCount_DESC',
  TotalSharesAsc = 'totalShares_ASC',
  TotalSharesDesc = 'totalShares_DESC',
  TotalValueAsc = 'totalValue_ASC',
  TotalValueDesc = 'totalValue_DESC',
  VaultAprAsc = 'vault_apr_ASC',
  VaultAprDesc = 'vault_apr_DESC',
  VaultClaimableOwnerSharesAsc = 'vault_claimableOwnerShares_ASC',
  VaultClaimableOwnerSharesDesc = 'vault_claimableOwnerShares_DESC',
  VaultIdAsc = 'vault_id_ASC',
  VaultIdDesc = 'vault_id_DESC',
  VaultLastSharePriceCheckpointAsc = 'vault_lastSharePriceCheckpoint_ASC',
  VaultLastSharePriceCheckpointDesc = 'vault_lastSharePriceCheckpoint_DESC',
  WhitelistEnabledAsc = 'whitelistEnabled_ASC',
  WhitelistEnabledDesc = 'whitelistEnabled_DESC',
  WithdrawalSharesAsc = 'withdrawalShares_ASC',
  WithdrawalSharesDesc = 'withdrawalShares_DESC',
  WithdrawalValueAsc = 'withdrawalValue_ASC',
  WithdrawalValueDesc = 'withdrawalValue_DESC'
}

export type BasePoolWhereInput = {
  AND?: InputMaybe<Array<BasePoolWhereInput>>;
  OR?: InputMaybe<Array<BasePoolWhereInput>>;
  account?: InputMaybe<AccountWhereInput>;
  account_isNull?: InputMaybe<Scalars['Boolean']>;
  cid_eq?: InputMaybe<Scalars['Int']>;
  cid_gt?: InputMaybe<Scalars['Int']>;
  cid_gte?: InputMaybe<Scalars['Int']>;
  cid_in?: InputMaybe<Array<Scalars['Int']>>;
  cid_isNull?: InputMaybe<Scalars['Boolean']>;
  cid_lt?: InputMaybe<Scalars['Int']>;
  cid_lte?: InputMaybe<Scalars['Int']>;
  cid_not_eq?: InputMaybe<Scalars['Int']>;
  cid_not_in?: InputMaybe<Array<Scalars['Int']>>;
  commission_eq?: InputMaybe<Scalars['BigDecimal']>;
  commission_gt?: InputMaybe<Scalars['BigDecimal']>;
  commission_gte?: InputMaybe<Scalars['BigDecimal']>;
  commission_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  commission_isNull?: InputMaybe<Scalars['Boolean']>;
  commission_lt?: InputMaybe<Scalars['BigDecimal']>;
  commission_lte?: InputMaybe<Scalars['BigDecimal']>;
  commission_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  commission_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  delegations_every?: InputMaybe<DelegationWhereInput>;
  delegations_none?: InputMaybe<DelegationWhereInput>;
  delegations_some?: InputMaybe<DelegationWhereInput>;
  delegatorCount_eq?: InputMaybe<Scalars['Int']>;
  delegatorCount_gt?: InputMaybe<Scalars['Int']>;
  delegatorCount_gte?: InputMaybe<Scalars['Int']>;
  delegatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount_isNull?: InputMaybe<Scalars['Boolean']>;
  delegatorCount_lt?: InputMaybe<Scalars['Int']>;
  delegatorCount_lte?: InputMaybe<Scalars['Int']>;
  delegatorCount_not_eq?: InputMaybe<Scalars['Int']>;
  delegatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  freeValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  freeValue_isNull?: InputMaybe<Scalars['Boolean']>;
  freeValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  freeValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  kind_eq?: InputMaybe<BasePoolKind>;
  kind_in?: InputMaybe<Array<BasePoolKind>>;
  kind_isNull?: InputMaybe<Scalars['Boolean']>;
  kind_not_eq?: InputMaybe<BasePoolKind>;
  kind_not_in?: InputMaybe<Array<BasePoolKind>>;
  owner?: InputMaybe<AccountWhereInput>;
  owner_isNull?: InputMaybe<Scalars['Boolean']>;
  pid_eq?: InputMaybe<Scalars['BigInt']>;
  pid_gt?: InputMaybe<Scalars['BigInt']>;
  pid_gte?: InputMaybe<Scalars['BigInt']>;
  pid_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pid_isNull?: InputMaybe<Scalars['Boolean']>;
  pid_lt?: InputMaybe<Scalars['BigInt']>;
  pid_lte?: InputMaybe<Scalars['BigInt']>;
  pid_not_eq?: InputMaybe<Scalars['BigInt']>;
  pid_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  releasingValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  releasingValue_isNull?: InputMaybe<Scalars['Boolean']>;
  releasingValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  releasingValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharePrice_eq?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_gt?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_gte?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharePrice_isNull?: InputMaybe<Scalars['Boolean']>;
  sharePrice_lt?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_lte?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  sharePrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePool?: InputMaybe<StakePoolWhereInput>;
  stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
  totalShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalShares_isNull?: InputMaybe<Scalars['Boolean']>;
  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  totalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vault?: InputMaybe<VaultWhereInput>;
  vault_isNull?: InputMaybe<Scalars['Boolean']>;
  whitelistEnabled_eq?: InputMaybe<Scalars['Boolean']>;
  whitelistEnabled_isNull?: InputMaybe<Scalars['Boolean']>;
  whitelistEnabled_not_eq?: InputMaybe<Scalars['Boolean']>;
  whitelists_every?: InputMaybe<BasePoolWhitelistWhereInput>;
  whitelists_none?: InputMaybe<BasePoolWhitelistWhereInput>;
  whitelists_some?: InputMaybe<BasePoolWhitelistWhereInput>;
  withdrawalShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalShares_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type BasePoolWhitelist = {
  __typename?: 'BasePoolWhitelist';
  account: Account;
  basePool: BasePool;
  createTime: Scalars['DateTime'];
  /** ${pid}-${accountId} */
  id: Scalars['String'];
};

export type BasePoolWhitelistEdge = {
  __typename?: 'BasePoolWhitelistEdge';
  cursor: Scalars['String'];
  node: BasePoolWhitelist;
};

export enum BasePoolWhitelistOrderByInput {
  AccountIdAsc = 'account_id_ASC',
  AccountIdDesc = 'account_id_DESC',
  AccountIdentityDisplayAsc = 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc = 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc = 'account_identityLevel_ASC',
  AccountIdentityLevelDesc = 'account_identityLevel_DESC',
  AccountStakePoolNftCountAsc = 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc = 'account_stakePoolNftCount_DESC',
  AccountStakePoolOwnerRewardAsc = 'account_stakePoolOwnerReward_ASC',
  AccountStakePoolOwnerRewardDesc = 'account_stakePoolOwnerReward_DESC',
  AccountStakePoolValueAsc = 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc = 'account_stakePoolValue_DESC',
  AccountVaultNftCountAsc = 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc = 'account_vaultNftCount_DESC',
  AccountVaultValueAsc = 'account_vaultValue_ASC',
  AccountVaultValueDesc = 'account_vaultValue_DESC',
  BasePoolCidAsc = 'basePool_cid_ASC',
  BasePoolCidDesc = 'basePool_cid_DESC',
  BasePoolCommissionAsc = 'basePool_commission_ASC',
  BasePoolCommissionDesc = 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc = 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc = 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc = 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc = 'basePool_freeValue_DESC',
  BasePoolIdAsc = 'basePool_id_ASC',
  BasePoolIdDesc = 'basePool_id_DESC',
  BasePoolKindAsc = 'basePool_kind_ASC',
  BasePoolKindDesc = 'basePool_kind_DESC',
  BasePoolPidAsc = 'basePool_pid_ASC',
  BasePoolPidDesc = 'basePool_pid_DESC',
  BasePoolReleasingValueAsc = 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc = 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc = 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc = 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc = 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc = 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc = 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc = 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc = 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc = 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawalSharesAsc = 'basePool_withdrawalShares_ASC',
  BasePoolWithdrawalSharesDesc = 'basePool_withdrawalShares_DESC',
  BasePoolWithdrawalValueAsc = 'basePool_withdrawalValue_ASC',
  BasePoolWithdrawalValueDesc = 'basePool_withdrawalValue_DESC',
  CreateTimeAsc = 'createTime_ASC',
  CreateTimeDesc = 'createTime_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type BasePoolWhitelistWhereInput = {
  AND?: InputMaybe<Array<BasePoolWhitelistWhereInput>>;
  OR?: InputMaybe<Array<BasePoolWhitelistWhereInput>>;
  account?: InputMaybe<AccountWhereInput>;
  account_isNull?: InputMaybe<Scalars['Boolean']>;
  basePool?: InputMaybe<BasePoolWhereInput>;
  basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  createTime_eq?: InputMaybe<Scalars['DateTime']>;
  createTime_gt?: InputMaybe<Scalars['DateTime']>;
  createTime_gte?: InputMaybe<Scalars['DateTime']>;
  createTime_in?: InputMaybe<Array<Scalars['DateTime']>>;
  createTime_isNull?: InputMaybe<Scalars['Boolean']>;
  createTime_lt?: InputMaybe<Scalars['DateTime']>;
  createTime_lte?: InputMaybe<Scalars['DateTime']>;
  createTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  createTime_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
};

export type BasePoolWhitelistsConnection = {
  __typename?: 'BasePoolWhitelistsConnection';
  edges: Array<BasePoolWhitelistEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type BasePoolsConnection = {
  __typename?: 'BasePoolsConnection';
  edges: Array<BasePoolEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type Delegation = {
  __typename?: 'Delegation';
  account: Account;
  basePool: BasePool;
  delegationNft?: Maybe<DelegationNft>;
  /** ${pid}-${accountId} */
  id: Scalars['String'];
  shares: Scalars['BigDecimal'];
  value: Scalars['BigDecimal'];
  withdrawalNft?: Maybe<DelegationNft>;
  withdrawalShares: Scalars['BigDecimal'];
  withdrawalStartTime?: Maybe<Scalars['DateTime']>;
  withdrawalValue: Scalars['BigDecimal'];
};

export type DelegationEdge = {
  __typename?: 'DelegationEdge';
  cursor: Scalars['String'];
  node: Delegation;
};

export type DelegationNft = {
  __typename?: 'DelegationNft';
  collectionId: Scalars['Int'];
  /** ${collectionId}-${nftId} */
  id: Scalars['String'];
  nftId: Scalars['Int'];
  owner: Account;
};

export type DelegationNftEdge = {
  __typename?: 'DelegationNftEdge';
  cursor: Scalars['String'];
  node: DelegationNft;
};

export enum DelegationNftOrderByInput {
  CollectionIdAsc = 'collectionId_ASC',
  CollectionIdDesc = 'collectionId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NftIdAsc = 'nftId_ASC',
  NftIdDesc = 'nftId_DESC',
  OwnerIdAsc = 'owner_id_ASC',
  OwnerIdDesc = 'owner_id_DESC',
  OwnerIdentityDisplayAsc = 'owner_identityDisplay_ASC',
  OwnerIdentityDisplayDesc = 'owner_identityDisplay_DESC',
  OwnerIdentityLevelAsc = 'owner_identityLevel_ASC',
  OwnerIdentityLevelDesc = 'owner_identityLevel_DESC',
  OwnerStakePoolNftCountAsc = 'owner_stakePoolNftCount_ASC',
  OwnerStakePoolNftCountDesc = 'owner_stakePoolNftCount_DESC',
  OwnerStakePoolOwnerRewardAsc = 'owner_stakePoolOwnerReward_ASC',
  OwnerStakePoolOwnerRewardDesc = 'owner_stakePoolOwnerReward_DESC',
  OwnerStakePoolValueAsc = 'owner_stakePoolValue_ASC',
  OwnerStakePoolValueDesc = 'owner_stakePoolValue_DESC',
  OwnerVaultNftCountAsc = 'owner_vaultNftCount_ASC',
  OwnerVaultNftCountDesc = 'owner_vaultNftCount_DESC',
  OwnerVaultValueAsc = 'owner_vaultValue_ASC',
  OwnerVaultValueDesc = 'owner_vaultValue_DESC'
}

export type DelegationNftWhereInput = {
  AND?: InputMaybe<Array<DelegationNftWhereInput>>;
  OR?: InputMaybe<Array<DelegationNftWhereInput>>;
  collectionId_eq?: InputMaybe<Scalars['Int']>;
  collectionId_gt?: InputMaybe<Scalars['Int']>;
  collectionId_gte?: InputMaybe<Scalars['Int']>;
  collectionId_in?: InputMaybe<Array<Scalars['Int']>>;
  collectionId_isNull?: InputMaybe<Scalars['Boolean']>;
  collectionId_lt?: InputMaybe<Scalars['Int']>;
  collectionId_lte?: InputMaybe<Scalars['Int']>;
  collectionId_not_eq?: InputMaybe<Scalars['Int']>;
  collectionId_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  nftId_eq?: InputMaybe<Scalars['Int']>;
  nftId_gt?: InputMaybe<Scalars['Int']>;
  nftId_gte?: InputMaybe<Scalars['Int']>;
  nftId_in?: InputMaybe<Array<Scalars['Int']>>;
  nftId_isNull?: InputMaybe<Scalars['Boolean']>;
  nftId_lt?: InputMaybe<Scalars['Int']>;
  nftId_lte?: InputMaybe<Scalars['Int']>;
  nftId_not_eq?: InputMaybe<Scalars['Int']>;
  nftId_not_in?: InputMaybe<Array<Scalars['Int']>>;
  owner?: InputMaybe<AccountWhereInput>;
  owner_isNull?: InputMaybe<Scalars['Boolean']>;
};

export type DelegationNftsConnection = {
  __typename?: 'DelegationNftsConnection';
  edges: Array<DelegationNftEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export enum DelegationOrderByInput {
  AccountIdAsc = 'account_id_ASC',
  AccountIdDesc = 'account_id_DESC',
  AccountIdentityDisplayAsc = 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc = 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc = 'account_identityLevel_ASC',
  AccountIdentityLevelDesc = 'account_identityLevel_DESC',
  AccountStakePoolNftCountAsc = 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc = 'account_stakePoolNftCount_DESC',
  AccountStakePoolOwnerRewardAsc = 'account_stakePoolOwnerReward_ASC',
  AccountStakePoolOwnerRewardDesc = 'account_stakePoolOwnerReward_DESC',
  AccountStakePoolValueAsc = 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc = 'account_stakePoolValue_DESC',
  AccountVaultNftCountAsc = 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc = 'account_vaultNftCount_DESC',
  AccountVaultValueAsc = 'account_vaultValue_ASC',
  AccountVaultValueDesc = 'account_vaultValue_DESC',
  BasePoolCidAsc = 'basePool_cid_ASC',
  BasePoolCidDesc = 'basePool_cid_DESC',
  BasePoolCommissionAsc = 'basePool_commission_ASC',
  BasePoolCommissionDesc = 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc = 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc = 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc = 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc = 'basePool_freeValue_DESC',
  BasePoolIdAsc = 'basePool_id_ASC',
  BasePoolIdDesc = 'basePool_id_DESC',
  BasePoolKindAsc = 'basePool_kind_ASC',
  BasePoolKindDesc = 'basePool_kind_DESC',
  BasePoolPidAsc = 'basePool_pid_ASC',
  BasePoolPidDesc = 'basePool_pid_DESC',
  BasePoolReleasingValueAsc = 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc = 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc = 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc = 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc = 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc = 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc = 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc = 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc = 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc = 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawalSharesAsc = 'basePool_withdrawalShares_ASC',
  BasePoolWithdrawalSharesDesc = 'basePool_withdrawalShares_DESC',
  BasePoolWithdrawalValueAsc = 'basePool_withdrawalValue_ASC',
  BasePoolWithdrawalValueDesc = 'basePool_withdrawalValue_DESC',
  DelegationNftCollectionIdAsc = 'delegationNft_collectionId_ASC',
  DelegationNftCollectionIdDesc = 'delegationNft_collectionId_DESC',
  DelegationNftIdAsc = 'delegationNft_id_ASC',
  DelegationNftIdDesc = 'delegationNft_id_DESC',
  DelegationNftNftIdAsc = 'delegationNft_nftId_ASC',
  DelegationNftNftIdDesc = 'delegationNft_nftId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SharesAsc = 'shares_ASC',
  SharesDesc = 'shares_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC',
  WithdrawalNftCollectionIdAsc = 'withdrawalNft_collectionId_ASC',
  WithdrawalNftCollectionIdDesc = 'withdrawalNft_collectionId_DESC',
  WithdrawalNftIdAsc = 'withdrawalNft_id_ASC',
  WithdrawalNftIdDesc = 'withdrawalNft_id_DESC',
  WithdrawalNftNftIdAsc = 'withdrawalNft_nftId_ASC',
  WithdrawalNftNftIdDesc = 'withdrawalNft_nftId_DESC',
  WithdrawalSharesAsc = 'withdrawalShares_ASC',
  WithdrawalSharesDesc = 'withdrawalShares_DESC',
  WithdrawalStartTimeAsc = 'withdrawalStartTime_ASC',
  WithdrawalStartTimeDesc = 'withdrawalStartTime_DESC',
  WithdrawalValueAsc = 'withdrawalValue_ASC',
  WithdrawalValueDesc = 'withdrawalValue_DESC'
}

export type DelegationWhereInput = {
  AND?: InputMaybe<Array<DelegationWhereInput>>;
  OR?: InputMaybe<Array<DelegationWhereInput>>;
  account?: InputMaybe<AccountWhereInput>;
  account_isNull?: InputMaybe<Scalars['Boolean']>;
  basePool?: InputMaybe<BasePoolWhereInput>;
  basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  delegationNft?: InputMaybe<DelegationNftWhereInput>;
  delegationNft_isNull?: InputMaybe<Scalars['Boolean']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  shares_eq?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_isNull?: InputMaybe<Scalars['Boolean']>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  value_eq?: InputMaybe<Scalars['BigDecimal']>;
  value_gt?: InputMaybe<Scalars['BigDecimal']>;
  value_gte?: InputMaybe<Scalars['BigDecimal']>;
  value_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  value_isNull?: InputMaybe<Scalars['Boolean']>;
  value_lt?: InputMaybe<Scalars['BigDecimal']>;
  value_lte?: InputMaybe<Scalars['BigDecimal']>;
  value_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  value_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalNft?: InputMaybe<DelegationNftWhereInput>;
  withdrawalNft_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalShares_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalStartTime_eq?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_gt?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_gte?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_in?: InputMaybe<Array<Scalars['DateTime']>>;
  withdrawalStartTime_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalStartTime_lt?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_lte?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  withdrawalStartTime_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  withdrawalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  withdrawalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  withdrawalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  withdrawalValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type DelegationsConnection = {
  __typename?: 'DelegationsConnection';
  edges: Array<DelegationEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type GlobalState = {
  __typename?: 'GlobalState';
  /** in milliseconds during last 500 blocks */
  averageBlockTime: Scalars['Int'];
  height: Scalars['Int'];
  /** constant 0 */
  id: Scalars['String'];
  /** for apr calculation */
  idleWorkerShares: Scalars['BigDecimal'];
  /** for average block time calculation */
  lastRecordedBlockHeight: Scalars['Int'];
  /** for average block time calculation */
  lastRecordedBlockTime: Scalars['DateTime'];
  stakePoolValue: Scalars['BigDecimal'];
  /** excluded value vaults delegated to stake pools */
  totalValue: Scalars['BigDecimal'];
  vaultValue: Scalars['BigDecimal'];
};

export type GlobalStateEdge = {
  __typename?: 'GlobalStateEdge';
  cursor: Scalars['String'];
  node: GlobalState;
};

export enum GlobalStateOrderByInput {
  AverageBlockTimeAsc = 'averageBlockTime_ASC',
  AverageBlockTimeDesc = 'averageBlockTime_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IdleWorkerSharesAsc = 'idleWorkerShares_ASC',
  IdleWorkerSharesDesc = 'idleWorkerShares_DESC',
  LastRecordedBlockHeightAsc = 'lastRecordedBlockHeight_ASC',
  LastRecordedBlockHeightDesc = 'lastRecordedBlockHeight_DESC',
  LastRecordedBlockTimeAsc = 'lastRecordedBlockTime_ASC',
  LastRecordedBlockTimeDesc = 'lastRecordedBlockTime_DESC',
  StakePoolValueAsc = 'stakePoolValue_ASC',
  StakePoolValueDesc = 'stakePoolValue_DESC',
  TotalValueAsc = 'totalValue_ASC',
  TotalValueDesc = 'totalValue_DESC',
  VaultValueAsc = 'vaultValue_ASC',
  VaultValueDesc = 'vaultValue_DESC'
}

export type GlobalStateWhereInput = {
  AND?: InputMaybe<Array<GlobalStateWhereInput>>;
  OR?: InputMaybe<Array<GlobalStateWhereInput>>;
  averageBlockTime_eq?: InputMaybe<Scalars['Int']>;
  averageBlockTime_gt?: InputMaybe<Scalars['Int']>;
  averageBlockTime_gte?: InputMaybe<Scalars['Int']>;
  averageBlockTime_in?: InputMaybe<Array<Scalars['Int']>>;
  averageBlockTime_isNull?: InputMaybe<Scalars['Boolean']>;
  averageBlockTime_lt?: InputMaybe<Scalars['Int']>;
  averageBlockTime_lte?: InputMaybe<Scalars['Int']>;
  averageBlockTime_not_eq?: InputMaybe<Scalars['Int']>;
  averageBlockTime_not_in?: InputMaybe<Array<Scalars['Int']>>;
  height_eq?: InputMaybe<Scalars['Int']>;
  height_gt?: InputMaybe<Scalars['Int']>;
  height_gte?: InputMaybe<Scalars['Int']>;
  height_in?: InputMaybe<Array<Scalars['Int']>>;
  height_isNull?: InputMaybe<Scalars['Boolean']>;
  height_lt?: InputMaybe<Scalars['Int']>;
  height_lte?: InputMaybe<Scalars['Int']>;
  height_not_eq?: InputMaybe<Scalars['Int']>;
  height_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  idleWorkerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  idleWorkerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  idleWorkerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  lastRecordedBlockHeight_eq?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_gt?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_gte?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_in?: InputMaybe<Array<Scalars['Int']>>;
  lastRecordedBlockHeight_isNull?: InputMaybe<Scalars['Boolean']>;
  lastRecordedBlockHeight_lt?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_lte?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_not_eq?: InputMaybe<Scalars['Int']>;
  lastRecordedBlockHeight_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastRecordedBlockTime_eq?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_gt?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_gte?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_in?: InputMaybe<Array<Scalars['DateTime']>>;
  lastRecordedBlockTime_isNull?: InputMaybe<Scalars['Boolean']>;
  lastRecordedBlockTime_lt?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_lte?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  lastRecordedBlockTime_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  stakePoolValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePoolValue_isNull?: InputMaybe<Scalars['Boolean']>;
  stakePoolValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  stakePoolValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  totalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vaultValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vaultValue_isNull?: InputMaybe<Scalars['Boolean']>;
  vaultValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  vaultValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type GlobalStatesConnection = {
  __typename?: 'GlobalStatesConnection';
  edges: Array<GlobalStateEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export enum IdentityLevel {
  Erroneous = 'Erroneous',
  FeePaid = 'FeePaid',
  KnownGood = 'KnownGood',
  LowQuality = 'LowQuality',
  OutOfDate = 'OutOfDate',
  Reasonable = 'Reasonable',
  Unknown = 'Unknown'
}

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor: Scalars['String'];
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  accountById?: Maybe<Account>;
  /** @deprecated Use accountById */
  accountByUniqueInput?: Maybe<Account>;
  accounts: Array<Account>;
  accountsConnection: AccountsConnection;
  basePoolById?: Maybe<BasePool>;
  /** @deprecated Use basePoolById */
  basePoolByUniqueInput?: Maybe<BasePool>;
  basePoolWhitelistById?: Maybe<BasePoolWhitelist>;
  /** @deprecated Use basePoolWhitelistById */
  basePoolWhitelistByUniqueInput?: Maybe<BasePoolWhitelist>;
  basePoolWhitelists: Array<BasePoolWhitelist>;
  basePoolWhitelistsConnection: BasePoolWhitelistsConnection;
  basePools: Array<BasePool>;
  basePoolsConnection: BasePoolsConnection;
  delegationById?: Maybe<Delegation>;
  /** @deprecated Use delegationById */
  delegationByUniqueInput?: Maybe<Delegation>;
  delegationNftById?: Maybe<DelegationNft>;
  /** @deprecated Use delegationNftById */
  delegationNftByUniqueInput?: Maybe<DelegationNft>;
  delegationNfts: Array<DelegationNft>;
  delegationNftsConnection: DelegationNftsConnection;
  delegations: Array<Delegation>;
  delegationsConnection: DelegationsConnection;
  globalStateById?: Maybe<GlobalState>;
  /** @deprecated Use globalStateById */
  globalStateByUniqueInput?: Maybe<GlobalState>;
  globalStates: Array<GlobalState>;
  globalStatesConnection: GlobalStatesConnection;
  sessionById?: Maybe<Session>;
  /** @deprecated Use sessionById */
  sessionByUniqueInput?: Maybe<Session>;
  sessions: Array<Session>;
  sessionsConnection: SessionsConnection;
  squidStatus?: Maybe<SquidStatus>;
  stakePoolById?: Maybe<StakePool>;
  /** @deprecated Use stakePoolById */
  stakePoolByUniqueInput?: Maybe<StakePool>;
  stakePools: Array<StakePool>;
  stakePoolsConnection: StakePoolsConnection;
  tokenomicParameters: Array<TokenomicParameters>;
  tokenomicParametersById?: Maybe<TokenomicParameters>;
  /** @deprecated Use tokenomicParametersById */
  tokenomicParametersByUniqueInput?: Maybe<TokenomicParameters>;
  tokenomicParametersConnection: TokenomicParametersConnection;
  vaultById?: Maybe<Vault>;
  /** @deprecated Use vaultById */
  vaultByUniqueInput?: Maybe<Vault>;
  vaults: Array<Vault>;
  vaultsConnection: VaultsConnection;
  workerById?: Maybe<Worker>;
  /** @deprecated Use workerById */
  workerByUniqueInput?: Maybe<Worker>;
  workers: Array<Worker>;
  workersConnection: WorkersConnection;
};


export type QueryAccountByIdArgs = {
  id: Scalars['String'];
};


export type QueryAccountByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryAccountsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AccountOrderByInput>>;
  where?: InputMaybe<AccountWhereInput>;
};


export type QueryAccountsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<AccountOrderByInput>;
  where?: InputMaybe<AccountWhereInput>;
};


export type QueryBasePoolByIdArgs = {
  id: Scalars['String'];
};


export type QueryBasePoolByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryBasePoolWhitelistByIdArgs = {
  id: Scalars['String'];
};


export type QueryBasePoolWhitelistByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryBasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


export type QueryBasePoolWhitelistsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<BasePoolWhitelistOrderByInput>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


export type QueryBasePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};


export type QueryBasePoolsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<BasePoolOrderByInput>;
  where?: InputMaybe<BasePoolWhereInput>;
};


export type QueryDelegationByIdArgs = {
  id: Scalars['String'];
};


export type QueryDelegationByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryDelegationNftByIdArgs = {
  id: Scalars['String'];
};


export type QueryDelegationNftByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryDelegationNftsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<DelegationNftOrderByInput>>;
  where?: InputMaybe<DelegationNftWhereInput>;
};


export type QueryDelegationNftsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<DelegationNftOrderByInput>;
  where?: InputMaybe<DelegationNftWhereInput>;
};


export type QueryDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


export type QueryDelegationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<DelegationOrderByInput>;
  where?: InputMaybe<DelegationWhereInput>;
};


export type QueryGlobalStateByIdArgs = {
  id: Scalars['String'];
};


export type QueryGlobalStateByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryGlobalStatesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<GlobalStateOrderByInput>>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


export type QueryGlobalStatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<GlobalStateOrderByInput>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


export type QuerySessionByIdArgs = {
  id: Scalars['String'];
};


export type QuerySessionByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QuerySessionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<SessionOrderByInput>>;
  where?: InputMaybe<SessionWhereInput>;
};


export type QuerySessionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<SessionOrderByInput>;
  where?: InputMaybe<SessionWhereInput>;
};


export type QueryStakePoolByIdArgs = {
  id: Scalars['String'];
};


export type QueryStakePoolByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryStakePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<StakePoolOrderByInput>>;
  where?: InputMaybe<StakePoolWhereInput>;
};


export type QueryStakePoolsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<StakePoolOrderByInput>;
  where?: InputMaybe<StakePoolWhereInput>;
};


export type QueryTokenomicParametersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<TokenomicParametersOrderByInput>>;
  where?: InputMaybe<TokenomicParametersWhereInput>;
};


export type QueryTokenomicParametersByIdArgs = {
  id: Scalars['String'];
};


export type QueryTokenomicParametersByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryTokenomicParametersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<TokenomicParametersOrderByInput>;
  where?: InputMaybe<TokenomicParametersWhereInput>;
};


export type QueryVaultByIdArgs = {
  id: Scalars['String'];
};


export type QueryVaultByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryVaultsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<VaultOrderByInput>>;
  where?: InputMaybe<VaultWhereInput>;
};


export type QueryVaultsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<VaultOrderByInput>;
  where?: InputMaybe<VaultWhereInput>;
};


export type QueryWorkerByIdArgs = {
  id: Scalars['String'];
};


export type QueryWorkerByUniqueInputArgs = {
  where: WhereIdInput;
};


export type QueryWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<WorkerOrderByInput>>;
  where?: InputMaybe<WorkerWhereInput>;
};


export type QueryWorkersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: Array<WorkerOrderByInput>;
  where?: InputMaybe<WorkerWhereInput>;
};

export type Session = {
  __typename?: 'Session';
  coolingDownStartTime?: Maybe<Scalars['DateTime']>;
  /** session account address */
  id: Scalars['String'];
  isBound: Scalars['Boolean'];
  pInit: Scalars['Int'];
  pInstant: Scalars['Int'];
  stake: Scalars['BigDecimal'];
  stakePool?: Maybe<StakePool>;
  state: WorkerState;
  totalReward: Scalars['BigDecimal'];
  v: Scalars['BigDecimal'];
  ve: Scalars['BigDecimal'];
  worker?: Maybe<Worker>;
};

export type SessionEdge = {
  __typename?: 'SessionEdge';
  cursor: Scalars['String'];
  node: Session;
};

export enum SessionOrderByInput {
  CoolingDownStartTimeAsc = 'coolingDownStartTime_ASC',
  CoolingDownStartTimeDesc = 'coolingDownStartTime_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsBoundAsc = 'isBound_ASC',
  IsBoundDesc = 'isBound_DESC',
  PInitAsc = 'pInit_ASC',
  PInitDesc = 'pInit_DESC',
  PInstantAsc = 'pInstant_ASC',
  PInstantDesc = 'pInstant_DESC',
  StakePoolAprMultiplierAsc = 'stakePool_aprMultiplier_ASC',
  StakePoolAprMultiplierDesc = 'stakePool_aprMultiplier_DESC',
  StakePoolCapacityAsc = 'stakePool_capacity_ASC',
  StakePoolCapacityDesc = 'stakePool_capacity_DESC',
  StakePoolDelegableAsc = 'stakePool_delegable_ASC',
  StakePoolDelegableDesc = 'stakePool_delegable_DESC',
  StakePoolIdAsc = 'stakePool_id_ASC',
  StakePoolIdDesc = 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc = 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc = 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc = 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc = 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc = 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc = 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc = 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc = 'stakePool_workerCount_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  TotalRewardAsc = 'totalReward_ASC',
  TotalRewardDesc = 'totalReward_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  VeAsc = 've_ASC',
  VeDesc = 've_DESC',
  WorkerConfidenceLevelAsc = 'worker_confidenceLevel_ASC',
  WorkerConfidenceLevelDesc = 'worker_confidenceLevel_DESC',
  WorkerIdAsc = 'worker_id_ASC',
  WorkerIdDesc = 'worker_id_DESC',
  WorkerInitialScoreAsc = 'worker_initialScore_ASC',
  WorkerInitialScoreDesc = 'worker_initialScore_DESC',
  WorkerSMaxAsc = 'worker_sMax_ASC',
  WorkerSMaxDesc = 'worker_sMax_DESC',
  WorkerSMinAsc = 'worker_sMin_ASC',
  WorkerSMinDesc = 'worker_sMin_DESC',
  WorkerSharesAsc = 'worker_shares_ASC',
  WorkerSharesDesc = 'worker_shares_DESC'
}

export type SessionWhereInput = {
  AND?: InputMaybe<Array<SessionWhereInput>>;
  OR?: InputMaybe<Array<SessionWhereInput>>;
  coolingDownStartTime_eq?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_gt?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_gte?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_in?: InputMaybe<Array<Scalars['DateTime']>>;
  coolingDownStartTime_isNull?: InputMaybe<Scalars['Boolean']>;
  coolingDownStartTime_lt?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_lte?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  coolingDownStartTime_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  isBound_eq?: InputMaybe<Scalars['Boolean']>;
  isBound_isNull?: InputMaybe<Scalars['Boolean']>;
  isBound_not_eq?: InputMaybe<Scalars['Boolean']>;
  pInit_eq?: InputMaybe<Scalars['Int']>;
  pInit_gt?: InputMaybe<Scalars['Int']>;
  pInit_gte?: InputMaybe<Scalars['Int']>;
  pInit_in?: InputMaybe<Array<Scalars['Int']>>;
  pInit_isNull?: InputMaybe<Scalars['Boolean']>;
  pInit_lt?: InputMaybe<Scalars['Int']>;
  pInit_lte?: InputMaybe<Scalars['Int']>;
  pInit_not_eq?: InputMaybe<Scalars['Int']>;
  pInit_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pInstant_eq?: InputMaybe<Scalars['Int']>;
  pInstant_gt?: InputMaybe<Scalars['Int']>;
  pInstant_gte?: InputMaybe<Scalars['Int']>;
  pInstant_in?: InputMaybe<Array<Scalars['Int']>>;
  pInstant_isNull?: InputMaybe<Scalars['Boolean']>;
  pInstant_lt?: InputMaybe<Scalars['Int']>;
  pInstant_lte?: InputMaybe<Scalars['Int']>;
  pInstant_not_eq?: InputMaybe<Scalars['Int']>;
  pInstant_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakePool?: InputMaybe<StakePoolWhereInput>;
  stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
  stake_eq?: InputMaybe<Scalars['BigDecimal']>;
  stake_gt?: InputMaybe<Scalars['BigDecimal']>;
  stake_gte?: InputMaybe<Scalars['BigDecimal']>;
  stake_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stake_isNull?: InputMaybe<Scalars['Boolean']>;
  stake_lt?: InputMaybe<Scalars['BigDecimal']>;
  stake_lte?: InputMaybe<Scalars['BigDecimal']>;
  stake_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  stake_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  state_eq?: InputMaybe<WorkerState>;
  state_in?: InputMaybe<Array<WorkerState>>;
  state_isNull?: InputMaybe<Scalars['Boolean']>;
  state_not_eq?: InputMaybe<WorkerState>;
  state_not_in?: InputMaybe<Array<WorkerState>>;
  totalReward_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalReward_isNull?: InputMaybe<Scalars['Boolean']>;
  totalReward_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  totalReward_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  v_eq?: InputMaybe<Scalars['BigDecimal']>;
  v_gt?: InputMaybe<Scalars['BigDecimal']>;
  v_gte?: InputMaybe<Scalars['BigDecimal']>;
  v_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  v_isNull?: InputMaybe<Scalars['Boolean']>;
  v_lt?: InputMaybe<Scalars['BigDecimal']>;
  v_lte?: InputMaybe<Scalars['BigDecimal']>;
  v_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  v_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ve_eq?: InputMaybe<Scalars['BigDecimal']>;
  ve_gt?: InputMaybe<Scalars['BigDecimal']>;
  ve_gte?: InputMaybe<Scalars['BigDecimal']>;
  ve_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ve_isNull?: InputMaybe<Scalars['Boolean']>;
  ve_lt?: InputMaybe<Scalars['BigDecimal']>;
  ve_lte?: InputMaybe<Scalars['BigDecimal']>;
  ve_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  ve_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  worker?: InputMaybe<WorkerWhereInput>;
  worker_isNull?: InputMaybe<Scalars['Boolean']>;
};

export type SessionsConnection = {
  __typename?: 'SessionsConnection';
  edges: Array<SessionEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type SquidStatus = {
  __typename?: 'SquidStatus';
  /** The height of the processed part of the chain */
  height?: Maybe<Scalars['Int']>;
};

export type StakePool = {
  __typename?: 'StakePool';
  aprMultiplier: Scalars['BigDecimal'];
  basePool: BasePool;
  /** null means infinite */
  capacity?: Maybe<Scalars['BigDecimal']>;
  /** null means infinite */
  delegable?: Maybe<Scalars['BigDecimal']>;
  /** pid */
  id: Scalars['String'];
  idleWorkerCount: Scalars['Int'];
  idleWorkerShares: Scalars['BigDecimal'];
  ownerReward: Scalars['BigDecimal'];
  workerCount: Scalars['Int'];
};

export type StakePoolEdge = {
  __typename?: 'StakePoolEdge';
  cursor: Scalars['String'];
  node: StakePool;
};

export enum StakePoolOrderByInput {
  AprMultiplierAsc = 'aprMultiplier_ASC',
  AprMultiplierDesc = 'aprMultiplier_DESC',
  BasePoolCidAsc = 'basePool_cid_ASC',
  BasePoolCidDesc = 'basePool_cid_DESC',
  BasePoolCommissionAsc = 'basePool_commission_ASC',
  BasePoolCommissionDesc = 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc = 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc = 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc = 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc = 'basePool_freeValue_DESC',
  BasePoolIdAsc = 'basePool_id_ASC',
  BasePoolIdDesc = 'basePool_id_DESC',
  BasePoolKindAsc = 'basePool_kind_ASC',
  BasePoolKindDesc = 'basePool_kind_DESC',
  BasePoolPidAsc = 'basePool_pid_ASC',
  BasePoolPidDesc = 'basePool_pid_DESC',
  BasePoolReleasingValueAsc = 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc = 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc = 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc = 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc = 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc = 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc = 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc = 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc = 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc = 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawalSharesAsc = 'basePool_withdrawalShares_ASC',
  BasePoolWithdrawalSharesDesc = 'basePool_withdrawalShares_DESC',
  BasePoolWithdrawalValueAsc = 'basePool_withdrawalValue_ASC',
  BasePoolWithdrawalValueDesc = 'basePool_withdrawalValue_DESC',
  CapacityAsc = 'capacity_ASC',
  CapacityDesc = 'capacity_DESC',
  DelegableAsc = 'delegable_ASC',
  DelegableDesc = 'delegable_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IdleWorkerCountAsc = 'idleWorkerCount_ASC',
  IdleWorkerCountDesc = 'idleWorkerCount_DESC',
  IdleWorkerSharesAsc = 'idleWorkerShares_ASC',
  IdleWorkerSharesDesc = 'idleWorkerShares_DESC',
  OwnerRewardAsc = 'ownerReward_ASC',
  OwnerRewardDesc = 'ownerReward_DESC',
  WorkerCountAsc = 'workerCount_ASC',
  WorkerCountDesc = 'workerCount_DESC'
}

export type StakePoolWhereInput = {
  AND?: InputMaybe<Array<StakePoolWhereInput>>;
  OR?: InputMaybe<Array<StakePoolWhereInput>>;
  aprMultiplier_eq?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_gt?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_gte?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  aprMultiplier_isNull?: InputMaybe<Scalars['Boolean']>;
  aprMultiplier_lt?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_lte?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  aprMultiplier_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  basePool?: InputMaybe<BasePoolWhereInput>;
  basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  capacity_eq?: InputMaybe<Scalars['BigDecimal']>;
  capacity_gt?: InputMaybe<Scalars['BigDecimal']>;
  capacity_gte?: InputMaybe<Scalars['BigDecimal']>;
  capacity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  capacity_isNull?: InputMaybe<Scalars['Boolean']>;
  capacity_lt?: InputMaybe<Scalars['BigDecimal']>;
  capacity_lte?: InputMaybe<Scalars['BigDecimal']>;
  capacity_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  capacity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  delegable_eq?: InputMaybe<Scalars['BigDecimal']>;
  delegable_gt?: InputMaybe<Scalars['BigDecimal']>;
  delegable_gte?: InputMaybe<Scalars['BigDecimal']>;
  delegable_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  delegable_isNull?: InputMaybe<Scalars['Boolean']>;
  delegable_lt?: InputMaybe<Scalars['BigDecimal']>;
  delegable_lte?: InputMaybe<Scalars['BigDecimal']>;
  delegable_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  delegable_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  idleWorkerCount_eq?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_gt?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_gte?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_in?: InputMaybe<Array<Scalars['Int']>>;
  idleWorkerCount_isNull?: InputMaybe<Scalars['Boolean']>;
  idleWorkerCount_lt?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_lte?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_not_eq?: InputMaybe<Scalars['Int']>;
  idleWorkerCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  idleWorkerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  idleWorkerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  idleWorkerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  idleWorkerShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ownerReward_eq?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_gt?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_gte?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ownerReward_isNull?: InputMaybe<Scalars['Boolean']>;
  ownerReward_lt?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_lte?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  ownerReward_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  workerCount_eq?: InputMaybe<Scalars['Int']>;
  workerCount_gt?: InputMaybe<Scalars['Int']>;
  workerCount_gte?: InputMaybe<Scalars['Int']>;
  workerCount_in?: InputMaybe<Array<Scalars['Int']>>;
  workerCount_isNull?: InputMaybe<Scalars['Boolean']>;
  workerCount_lt?: InputMaybe<Scalars['Int']>;
  workerCount_lte?: InputMaybe<Scalars['Int']>;
  workerCount_not_eq?: InputMaybe<Scalars['Int']>;
  workerCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type StakePoolsConnection = {
  __typename?: 'StakePoolsConnection';
  edges: Array<StakePoolEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type Subscription = {
  __typename?: 'Subscription';
  accountById?: Maybe<Account>;
  accounts: Array<Account>;
  basePoolById?: Maybe<BasePool>;
  basePoolWhitelistById?: Maybe<BasePoolWhitelist>;
  basePoolWhitelists: Array<BasePoolWhitelist>;
  basePools: Array<BasePool>;
  delegationById?: Maybe<Delegation>;
  delegationNftById?: Maybe<DelegationNft>;
  delegationNfts: Array<DelegationNft>;
  delegations: Array<Delegation>;
  globalStateById?: Maybe<GlobalState>;
  globalStates: Array<GlobalState>;
  sessionById?: Maybe<Session>;
  sessions: Array<Session>;
  stakePoolById?: Maybe<StakePool>;
  stakePools: Array<StakePool>;
  tokenomicParameters: Array<TokenomicParameters>;
  tokenomicParametersById?: Maybe<TokenomicParameters>;
  vaultById?: Maybe<Vault>;
  vaults: Array<Vault>;
  workerById?: Maybe<Worker>;
  workers: Array<Worker>;
};


export type SubscriptionAccountByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionAccountsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<AccountOrderByInput>>;
  where?: InputMaybe<AccountWhereInput>;
};


export type SubscriptionBasePoolByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionBasePoolWhitelistByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionBasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


export type SubscriptionBasePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};


export type SubscriptionDelegationByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionDelegationNftByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionDelegationNftsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<DelegationNftOrderByInput>>;
  where?: InputMaybe<DelegationNftWhereInput>;
};


export type SubscriptionDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


export type SubscriptionGlobalStateByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionGlobalStatesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<GlobalStateOrderByInput>>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


export type SubscriptionSessionByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionSessionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<SessionOrderByInput>>;
  where?: InputMaybe<SessionWhereInput>;
};


export type SubscriptionStakePoolByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionStakePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<StakePoolOrderByInput>>;
  where?: InputMaybe<StakePoolWhereInput>;
};


export type SubscriptionTokenomicParametersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<TokenomicParametersOrderByInput>>;
  where?: InputMaybe<TokenomicParametersWhereInput>;
};


export type SubscriptionTokenomicParametersByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionVaultByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionVaultsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<VaultOrderByInput>>;
  where?: InputMaybe<VaultWhereInput>;
};


export type SubscriptionWorkerByIdArgs = {
  id: Scalars['String'];
};


export type SubscriptionWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Array<WorkerOrderByInput>>;
  where?: InputMaybe<WorkerWhereInput>;
};

export type TokenomicParameters = {
  __typename?: 'TokenomicParameters';
  budgetPerBlock: Scalars['BigDecimal'];
  /** constant 0 */
  id: Scalars['String'];
  k: Scalars['BigDecimal'];
  phaRate: Scalars['BigDecimal'];
  re: Scalars['BigDecimal'];
  treasuryRatio: Scalars['BigDecimal'];
  vMax: Scalars['BigDecimal'];
};

export type TokenomicParametersConnection = {
  __typename?: 'TokenomicParametersConnection';
  edges: Array<TokenomicParametersEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type TokenomicParametersEdge = {
  __typename?: 'TokenomicParametersEdge';
  cursor: Scalars['String'];
  node: TokenomicParameters;
};

export enum TokenomicParametersOrderByInput {
  BudgetPerBlockAsc = 'budgetPerBlock_ASC',
  BudgetPerBlockDesc = 'budgetPerBlock_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KAsc = 'k_ASC',
  KDesc = 'k_DESC',
  PhaRateAsc = 'phaRate_ASC',
  PhaRateDesc = 'phaRate_DESC',
  ReAsc = 're_ASC',
  ReDesc = 're_DESC',
  TreasuryRatioAsc = 'treasuryRatio_ASC',
  TreasuryRatioDesc = 'treasuryRatio_DESC',
  VMaxAsc = 'vMax_ASC',
  VMaxDesc = 'vMax_DESC'
}

export type TokenomicParametersWhereInput = {
  AND?: InputMaybe<Array<TokenomicParametersWhereInput>>;
  OR?: InputMaybe<Array<TokenomicParametersWhereInput>>;
  budgetPerBlock_eq?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_gt?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_gte?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  budgetPerBlock_isNull?: InputMaybe<Scalars['Boolean']>;
  budgetPerBlock_lt?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_lte?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  budgetPerBlock_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  k_eq?: InputMaybe<Scalars['BigDecimal']>;
  k_gt?: InputMaybe<Scalars['BigDecimal']>;
  k_gte?: InputMaybe<Scalars['BigDecimal']>;
  k_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  k_isNull?: InputMaybe<Scalars['Boolean']>;
  k_lt?: InputMaybe<Scalars['BigDecimal']>;
  k_lte?: InputMaybe<Scalars['BigDecimal']>;
  k_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  k_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  phaRate_eq?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  phaRate_isNull?: InputMaybe<Scalars['Boolean']>;
  phaRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  phaRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  re_eq?: InputMaybe<Scalars['BigDecimal']>;
  re_gt?: InputMaybe<Scalars['BigDecimal']>;
  re_gte?: InputMaybe<Scalars['BigDecimal']>;
  re_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  re_isNull?: InputMaybe<Scalars['Boolean']>;
  re_lt?: InputMaybe<Scalars['BigDecimal']>;
  re_lte?: InputMaybe<Scalars['BigDecimal']>;
  re_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  re_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  treasuryRatio_eq?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_gt?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_gte?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  treasuryRatio_isNull?: InputMaybe<Scalars['Boolean']>;
  treasuryRatio_lt?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_lte?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  treasuryRatio_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vMax_eq?: InputMaybe<Scalars['BigDecimal']>;
  vMax_gt?: InputMaybe<Scalars['BigDecimal']>;
  vMax_gte?: InputMaybe<Scalars['BigDecimal']>;
  vMax_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vMax_isNull?: InputMaybe<Scalars['Boolean']>;
  vMax_lt?: InputMaybe<Scalars['BigDecimal']>;
  vMax_lte?: InputMaybe<Scalars['BigDecimal']>;
  vMax_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  vMax_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type Vault = {
  __typename?: 'Vault';
  apr: Scalars['BigDecimal'];
  basePool: BasePool;
  claimableOwnerShares: Scalars['BigDecimal'];
  /** pid */
  id: Scalars['String'];
  /** share price of owner's last gain */
  lastSharePriceCheckpoint: Scalars['BigDecimal'];
};

export type VaultEdge = {
  __typename?: 'VaultEdge';
  cursor: Scalars['String'];
  node: Vault;
};

export enum VaultOrderByInput {
  AprAsc = 'apr_ASC',
  AprDesc = 'apr_DESC',
  BasePoolCidAsc = 'basePool_cid_ASC',
  BasePoolCidDesc = 'basePool_cid_DESC',
  BasePoolCommissionAsc = 'basePool_commission_ASC',
  BasePoolCommissionDesc = 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc = 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc = 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc = 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc = 'basePool_freeValue_DESC',
  BasePoolIdAsc = 'basePool_id_ASC',
  BasePoolIdDesc = 'basePool_id_DESC',
  BasePoolKindAsc = 'basePool_kind_ASC',
  BasePoolKindDesc = 'basePool_kind_DESC',
  BasePoolPidAsc = 'basePool_pid_ASC',
  BasePoolPidDesc = 'basePool_pid_DESC',
  BasePoolReleasingValueAsc = 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc = 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc = 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc = 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc = 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc = 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc = 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc = 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc = 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc = 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawalSharesAsc = 'basePool_withdrawalShares_ASC',
  BasePoolWithdrawalSharesDesc = 'basePool_withdrawalShares_DESC',
  BasePoolWithdrawalValueAsc = 'basePool_withdrawalValue_ASC',
  BasePoolWithdrawalValueDesc = 'basePool_withdrawalValue_DESC',
  ClaimableOwnerSharesAsc = 'claimableOwnerShares_ASC',
  ClaimableOwnerSharesDesc = 'claimableOwnerShares_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LastSharePriceCheckpointAsc = 'lastSharePriceCheckpoint_ASC',
  LastSharePriceCheckpointDesc = 'lastSharePriceCheckpoint_DESC'
}

export type VaultWhereInput = {
  AND?: InputMaybe<Array<VaultWhereInput>>;
  OR?: InputMaybe<Array<VaultWhereInput>>;
  apr_eq?: InputMaybe<Scalars['BigDecimal']>;
  apr_gt?: InputMaybe<Scalars['BigDecimal']>;
  apr_gte?: InputMaybe<Scalars['BigDecimal']>;
  apr_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  apr_isNull?: InputMaybe<Scalars['Boolean']>;
  apr_lt?: InputMaybe<Scalars['BigDecimal']>;
  apr_lte?: InputMaybe<Scalars['BigDecimal']>;
  apr_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  apr_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  basePool?: InputMaybe<BasePoolWhereInput>;
  basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  claimableOwnerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  claimableOwnerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  claimableOwnerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  claimableOwnerShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  lastSharePriceCheckpoint_eq?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_gt?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_gte?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  lastSharePriceCheckpoint_isNull?: InputMaybe<Scalars['Boolean']>;
  lastSharePriceCheckpoint_lt?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_lte?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePriceCheckpoint_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export type VaultsConnection = {
  __typename?: 'VaultsConnection';
  edges: Array<VaultEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type WhereIdInput = {
  id: Scalars['String'];
};

export type Worker = {
  __typename?: 'Worker';
  confidenceLevel: Scalars['Int'];
  /** worker public key */
  id: Scalars['String'];
  initialScore?: Maybe<Scalars['Int']>;
  sMax?: Maybe<Scalars['BigDecimal']>;
  sMin?: Maybe<Scalars['BigDecimal']>;
  session?: Maybe<Session>;
  shares?: Maybe<Scalars['BigDecimal']>;
  stakePool?: Maybe<StakePool>;
};

export type WorkerEdge = {
  __typename?: 'WorkerEdge';
  cursor: Scalars['String'];
  node: Worker;
};

export enum WorkerOrderByInput {
  ConfidenceLevelAsc = 'confidenceLevel_ASC',
  ConfidenceLevelDesc = 'confidenceLevel_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InitialScoreAsc = 'initialScore_ASC',
  InitialScoreDesc = 'initialScore_DESC',
  SMaxAsc = 'sMax_ASC',
  SMaxDesc = 'sMax_DESC',
  SMinAsc = 'sMin_ASC',
  SMinDesc = 'sMin_DESC',
  SessionCoolingDownStartTimeAsc = 'session_coolingDownStartTime_ASC',
  SessionCoolingDownStartTimeDesc = 'session_coolingDownStartTime_DESC',
  SessionIdAsc = 'session_id_ASC',
  SessionIdDesc = 'session_id_DESC',
  SessionIsBoundAsc = 'session_isBound_ASC',
  SessionIsBoundDesc = 'session_isBound_DESC',
  SessionPInitAsc = 'session_pInit_ASC',
  SessionPInitDesc = 'session_pInit_DESC',
  SessionPInstantAsc = 'session_pInstant_ASC',
  SessionPInstantDesc = 'session_pInstant_DESC',
  SessionStakeAsc = 'session_stake_ASC',
  SessionStakeDesc = 'session_stake_DESC',
  SessionStateAsc = 'session_state_ASC',
  SessionStateDesc = 'session_state_DESC',
  SessionTotalRewardAsc = 'session_totalReward_ASC',
  SessionTotalRewardDesc = 'session_totalReward_DESC',
  SessionVAsc = 'session_v_ASC',
  SessionVDesc = 'session_v_DESC',
  SessionVeAsc = 'session_ve_ASC',
  SessionVeDesc = 'session_ve_DESC',
  SharesAsc = 'shares_ASC',
  SharesDesc = 'shares_DESC',
  StakePoolAprMultiplierAsc = 'stakePool_aprMultiplier_ASC',
  StakePoolAprMultiplierDesc = 'stakePool_aprMultiplier_DESC',
  StakePoolCapacityAsc = 'stakePool_capacity_ASC',
  StakePoolCapacityDesc = 'stakePool_capacity_DESC',
  StakePoolDelegableAsc = 'stakePool_delegable_ASC',
  StakePoolDelegableDesc = 'stakePool_delegable_DESC',
  StakePoolIdAsc = 'stakePool_id_ASC',
  StakePoolIdDesc = 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc = 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc = 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc = 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc = 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc = 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc = 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc = 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc = 'stakePool_workerCount_DESC'
}

export enum WorkerState {
  Ready = 'Ready',
  WorkerCoolingDown = 'WorkerCoolingDown',
  WorkerIdle = 'WorkerIdle',
  WorkerUnresponsive = 'WorkerUnresponsive'
}

export type WorkerWhereInput = {
  AND?: InputMaybe<Array<WorkerWhereInput>>;
  OR?: InputMaybe<Array<WorkerWhereInput>>;
  confidenceLevel_eq?: InputMaybe<Scalars['Int']>;
  confidenceLevel_gt?: InputMaybe<Scalars['Int']>;
  confidenceLevel_gte?: InputMaybe<Scalars['Int']>;
  confidenceLevel_in?: InputMaybe<Array<Scalars['Int']>>;
  confidenceLevel_isNull?: InputMaybe<Scalars['Boolean']>;
  confidenceLevel_lt?: InputMaybe<Scalars['Int']>;
  confidenceLevel_lte?: InputMaybe<Scalars['Int']>;
  confidenceLevel_not_eq?: InputMaybe<Scalars['Int']>;
  confidenceLevel_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_endsWith?: InputMaybe<Scalars['String']>;
  id_eq?: InputMaybe<Scalars['String']>;
  id_gt?: InputMaybe<Scalars['String']>;
  id_gte?: InputMaybe<Scalars['String']>;
  id_in?: InputMaybe<Array<Scalars['String']>>;
  id_isNull?: InputMaybe<Scalars['Boolean']>;
  id_lt?: InputMaybe<Scalars['String']>;
  id_lte?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  id_not_endsWith?: InputMaybe<Scalars['String']>;
  id_not_eq?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<Scalars['String']>>;
  id_not_startsWith?: InputMaybe<Scalars['String']>;
  id_startsWith?: InputMaybe<Scalars['String']>;
  initialScore_eq?: InputMaybe<Scalars['Int']>;
  initialScore_gt?: InputMaybe<Scalars['Int']>;
  initialScore_gte?: InputMaybe<Scalars['Int']>;
  initialScore_in?: InputMaybe<Array<Scalars['Int']>>;
  initialScore_isNull?: InputMaybe<Scalars['Boolean']>;
  initialScore_lt?: InputMaybe<Scalars['Int']>;
  initialScore_lte?: InputMaybe<Scalars['Int']>;
  initialScore_not_eq?: InputMaybe<Scalars['Int']>;
  initialScore_not_in?: InputMaybe<Array<Scalars['Int']>>;
  sMax_eq?: InputMaybe<Scalars['BigDecimal']>;
  sMax_gt?: InputMaybe<Scalars['BigDecimal']>;
  sMax_gte?: InputMaybe<Scalars['BigDecimal']>;
  sMax_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sMax_isNull?: InputMaybe<Scalars['Boolean']>;
  sMax_lt?: InputMaybe<Scalars['BigDecimal']>;
  sMax_lte?: InputMaybe<Scalars['BigDecimal']>;
  sMax_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  sMax_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sMin_eq?: InputMaybe<Scalars['BigDecimal']>;
  sMin_gt?: InputMaybe<Scalars['BigDecimal']>;
  sMin_gte?: InputMaybe<Scalars['BigDecimal']>;
  sMin_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sMin_isNull?: InputMaybe<Scalars['Boolean']>;
  sMin_lt?: InputMaybe<Scalars['BigDecimal']>;
  sMin_lte?: InputMaybe<Scalars['BigDecimal']>;
  sMin_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  sMin_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  session?: InputMaybe<SessionWhereInput>;
  session_isNull?: InputMaybe<Scalars['Boolean']>;
  shares_eq?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_isNull?: InputMaybe<Scalars['Boolean']>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakePool?: InputMaybe<StakePoolWhereInput>;
  stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
};

export type WorkersConnection = {
  __typename?: 'WorkersConnection';
  edges: Array<WorkerEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AccountByIdQueryVariables = Exact<{
  accountId: Scalars['String'];
}>;


export type AccountByIdQuery = { __typename?: 'Query', accountById?: { __typename?: 'Account', id: string, identityDisplay?: string | null, identityLevel?: IdentityLevel | null, stakePoolNftCount: number, stakePoolValue: string, vaultNftCount: number, vaultValue: string, stakePoolOwnerReward: string, ownedPools: Array<{ __typename?: 'BasePool', id: string, account: { __typename?: 'Account', id: string, stakePoolNftCount: number, stakePoolValue: string, vaultNftCount: number, vaultValue: string } }> } | null };

export type BasePoolCommonFragment = { __typename?: 'BasePool', cid: number, commission: string, delegatorCount: number, freeValue: string, id: string, kind: BasePoolKind, pid: string, releasingValue: string, sharePrice: string, totalShares: string, totalValue: string, whitelistEnabled: boolean, withdrawalShares: string, withdrawalValue: string, account: { __typename?: 'Account', id: string, stakePoolNftCount: number }, owner: { __typename?: 'Account', id: string, identityDisplay?: string | null, identityLevel?: IdentityLevel | null }, stakePool?: { __typename?: 'StakePool', aprMultiplier: string, capacity?: string | null, delegable?: string | null, idleWorkerCount: number, ownerReward: string, workerCount: number } | null, vault?: { __typename?: 'Vault', apr: string, claimableOwnerShares: string, lastSharePriceCheckpoint: string } | null };

export type BasePoolByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type BasePoolByIdQuery = { __typename?: 'Query', basePoolById?: { __typename?: 'BasePool', cid: number, commission: string, delegatorCount: number, freeValue: string, id: string, kind: BasePoolKind, pid: string, releasingValue: string, sharePrice: string, totalShares: string, totalValue: string, whitelistEnabled: boolean, withdrawalShares: string, withdrawalValue: string, account: { __typename?: 'Account', id: string, stakePoolNftCount: number }, owner: { __typename?: 'Account', id: string, identityDisplay?: string | null, identityLevel?: IdentityLevel | null }, stakePool?: { __typename?: 'StakePool', aprMultiplier: string, capacity?: string | null, delegable?: string | null, idleWorkerCount: number, ownerReward: string, workerCount: number } | null, vault?: { __typename?: 'Vault', apr: string, claimableOwnerShares: string, lastSharePriceCheckpoint: string } | null } | null };

export type BasePoolsConnectionQueryVariables = Exact<{
  orderBy: Array<BasePoolOrderByInput> | BasePoolOrderByInput;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  where?: InputMaybe<BasePoolWhereInput>;
}>;


export type BasePoolsConnectionQuery = { __typename?: 'Query', basePoolsConnection: { __typename?: 'BasePoolsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor: string, hasNextPage: boolean, hasPreviousPage: boolean, startCursor: string }, edges: Array<{ __typename?: 'BasePoolEdge', cursor: string, node: { __typename?: 'BasePool', cid: number, commission: string, delegatorCount: number, freeValue: string, id: string, kind: BasePoolKind, pid: string, releasingValue: string, sharePrice: string, totalShares: string, totalValue: string, whitelistEnabled: boolean, withdrawalShares: string, withdrawalValue: string, account: { __typename?: 'Account', id: string, stakePoolNftCount: number }, owner: { __typename?: 'Account', id: string, identityDisplay?: string | null, identityLevel?: IdentityLevel | null }, stakePool?: { __typename?: 'StakePool', aprMultiplier: string, capacity?: string | null, delegable?: string | null, idleWorkerCount: number, ownerReward: string, workerCount: number } | null, vault?: { __typename?: 'Vault', apr: string, claimableOwnerShares: string, lastSharePriceCheckpoint: string } | null } }> } };

export type DelegationCommonFragment = { __typename?: 'Delegation', id: string, shares: string, value: string, withdrawalStartTime?: string | null, withdrawalShares: string, withdrawalValue: string, basePool: { __typename?: 'BasePool', id: string, kind: BasePoolKind }, delegationNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null, withdrawalNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null };

export type DelegationByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type DelegationByIdQuery = { __typename?: 'Query', delegationById?: { __typename?: 'Delegation', id: string, shares: string, value: string, withdrawalStartTime?: string | null, withdrawalShares: string, withdrawalValue: string, basePool: { __typename?: 'BasePool', id: string, kind: BasePoolKind }, delegationNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null, withdrawalNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null } | null };

export type DelegationsConnectionQueryVariables = Exact<{
  orderBy: Array<DelegationOrderByInput> | DelegationOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DelegationWhereInput>;
}>;


export type DelegationsConnectionQuery = { __typename?: 'Query', delegationsConnection: { __typename?: 'DelegationsConnection', totalCount: number, edges: Array<{ __typename?: 'DelegationEdge', cursor: string, node: { __typename?: 'Delegation', id: string, shares: string, value: string, withdrawalStartTime?: string | null, withdrawalShares: string, withdrawalValue: string, basePool: { __typename?: 'BasePool', id: string, kind: BasePoolKind }, delegationNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null, withdrawalNft?: { __typename?: 'DelegationNft', collectionId: number, nftId: number } | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor: string, hasNextPage: boolean, hasPreviousPage: boolean, startCursor: string } } };

export type GlobalStateQueryVariables = Exact<{ [key: string]: never; }>;


export type GlobalStateQuery = { __typename?: 'Query', globalStateById?: { __typename?: 'GlobalState', averageBlockTime: number, height: number, stakePoolValue: string, totalValue: string, vaultValue: string, idleWorkerShares: string } | null };

export type TokenomicParametersQueryVariables = Exact<{ [key: string]: never; }>;


export type TokenomicParametersQuery = { __typename?: 'Query', tokenomicParametersById?: { __typename?: 'TokenomicParameters', phaRate: string, budgetPerBlock: string, vMax: string, treasuryRatio: string, k: string, re: string } | null };

export const BasePoolCommonFragmentDoc = `
    fragment BasePoolCommon on BasePool {
  account {
    id
    stakePoolNftCount
  }
  cid
  commission
  delegatorCount
  freeValue
  id
  kind
  owner {
    id
    identityDisplay
    identityLevel
  }
  pid
  releasingValue
  sharePrice
  totalShares
  totalValue
  whitelistEnabled
  withdrawalShares
  withdrawalValue
  stakePool {
    aprMultiplier
    capacity
    delegable
    idleWorkerCount
    ownerReward
    workerCount
  }
  vault {
    apr
    claimableOwnerShares
    lastSharePriceCheckpoint
  }
}
    `;
export const DelegationCommonFragmentDoc = `
    fragment DelegationCommon on Delegation {
  basePool {
    id
    kind
  }
  id
  shares
  value
  withdrawalStartTime
  withdrawalShares
  withdrawalValue
  delegationNft {
    collectionId
    nftId
  }
  withdrawalNft {
    collectionId
    nftId
  }
}
    `;
export const AccountByIdDocument = `
    query AccountById($accountId: String!) {
  accountById(id: $accountId) {
    id
    identityDisplay
    identityLevel
    stakePoolNftCount
    stakePoolValue
    vaultNftCount
    vaultValue
    stakePoolOwnerReward
    ownedPools(where: {kind_eq: StakePool}, orderBy: pid_ASC) {
      id
      account {
        id
        stakePoolNftCount
        stakePoolValue
        vaultNftCount
        vaultValue
      }
    }
  }
}
    `;
export const useAccountByIdQuery = <
      TData = AccountByIdQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: AccountByIdQueryVariables,
      options?: UseQueryOptions<AccountByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<AccountByIdQuery, TError, TData>(
      ['AccountById', variables],
      fetcher<AccountByIdQuery, AccountByIdQueryVariables>(client, AccountByIdDocument, variables, headers),
      options
    );
export const useInfiniteAccountByIdQuery = <
      TData = AccountByIdQuery,
      TError = unknown
    >(
      pageParamKey: keyof AccountByIdQueryVariables,
      client: GraphQLClient,
      variables: AccountByIdQueryVariables,
      options?: UseInfiniteQueryOptions<AccountByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<AccountByIdQuery, TError, TData>(
      ['AccountById.infinite', variables],
      (metaData) => fetcher<AccountByIdQuery, AccountByIdQueryVariables>(client, AccountByIdDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const BasePoolByIdDocument = `
    query BasePoolById($id: String!) {
  basePoolById(id: $id) {
    ...BasePoolCommon
  }
}
    ${BasePoolCommonFragmentDoc}`;
export const useBasePoolByIdQuery = <
      TData = BasePoolByIdQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: BasePoolByIdQueryVariables,
      options?: UseQueryOptions<BasePoolByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<BasePoolByIdQuery, TError, TData>(
      ['BasePoolById', variables],
      fetcher<BasePoolByIdQuery, BasePoolByIdQueryVariables>(client, BasePoolByIdDocument, variables, headers),
      options
    );
export const useInfiniteBasePoolByIdQuery = <
      TData = BasePoolByIdQuery,
      TError = unknown
    >(
      pageParamKey: keyof BasePoolByIdQueryVariables,
      client: GraphQLClient,
      variables: BasePoolByIdQueryVariables,
      options?: UseInfiniteQueryOptions<BasePoolByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<BasePoolByIdQuery, TError, TData>(
      ['BasePoolById.infinite', variables],
      (metaData) => fetcher<BasePoolByIdQuery, BasePoolByIdQueryVariables>(client, BasePoolByIdDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const BasePoolsConnectionDocument = `
    query BasePoolsConnection($orderBy: [BasePoolOrderByInput!]!, $first: Int, $after: String, $where: BasePoolWhereInput) {
  basePoolsConnection(
    orderBy: $orderBy
    first: $first
    after: $after
    where: $where
  ) {
    totalCount
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    edges {
      node {
        ...BasePoolCommon
      }
      cursor
    }
  }
}
    ${BasePoolCommonFragmentDoc}`;
export const useBasePoolsConnectionQuery = <
      TData = BasePoolsConnectionQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: BasePoolsConnectionQueryVariables,
      options?: UseQueryOptions<BasePoolsConnectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<BasePoolsConnectionQuery, TError, TData>(
      ['BasePoolsConnection', variables],
      fetcher<BasePoolsConnectionQuery, BasePoolsConnectionQueryVariables>(client, BasePoolsConnectionDocument, variables, headers),
      options
    );
export const useInfiniteBasePoolsConnectionQuery = <
      TData = BasePoolsConnectionQuery,
      TError = unknown
    >(
      pageParamKey: keyof BasePoolsConnectionQueryVariables,
      client: GraphQLClient,
      variables: BasePoolsConnectionQueryVariables,
      options?: UseInfiniteQueryOptions<BasePoolsConnectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<BasePoolsConnectionQuery, TError, TData>(
      ['BasePoolsConnection.infinite', variables],
      (metaData) => fetcher<BasePoolsConnectionQuery, BasePoolsConnectionQueryVariables>(client, BasePoolsConnectionDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const DelegationByIdDocument = `
    query DelegationById($id: String!) {
  delegationById(id: $id) {
    ...DelegationCommon
  }
}
    ${DelegationCommonFragmentDoc}`;
export const useDelegationByIdQuery = <
      TData = DelegationByIdQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: DelegationByIdQueryVariables,
      options?: UseQueryOptions<DelegationByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<DelegationByIdQuery, TError, TData>(
      ['DelegationById', variables],
      fetcher<DelegationByIdQuery, DelegationByIdQueryVariables>(client, DelegationByIdDocument, variables, headers),
      options
    );
export const useInfiniteDelegationByIdQuery = <
      TData = DelegationByIdQuery,
      TError = unknown
    >(
      pageParamKey: keyof DelegationByIdQueryVariables,
      client: GraphQLClient,
      variables: DelegationByIdQueryVariables,
      options?: UseInfiniteQueryOptions<DelegationByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<DelegationByIdQuery, TError, TData>(
      ['DelegationById.infinite', variables],
      (metaData) => fetcher<DelegationByIdQuery, DelegationByIdQueryVariables>(client, DelegationByIdDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const DelegationsConnectionDocument = `
    query DelegationsConnection($orderBy: [DelegationOrderByInput!]!, $after: String, $first: Int, $where: DelegationWhereInput) {
  delegationsConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    edges {
      cursor
      node {
        ...DelegationCommon
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}
    ${DelegationCommonFragmentDoc}`;
export const useDelegationsConnectionQuery = <
      TData = DelegationsConnectionQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: DelegationsConnectionQueryVariables,
      options?: UseQueryOptions<DelegationsConnectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<DelegationsConnectionQuery, TError, TData>(
      ['DelegationsConnection', variables],
      fetcher<DelegationsConnectionQuery, DelegationsConnectionQueryVariables>(client, DelegationsConnectionDocument, variables, headers),
      options
    );
export const useInfiniteDelegationsConnectionQuery = <
      TData = DelegationsConnectionQuery,
      TError = unknown
    >(
      pageParamKey: keyof DelegationsConnectionQueryVariables,
      client: GraphQLClient,
      variables: DelegationsConnectionQueryVariables,
      options?: UseInfiniteQueryOptions<DelegationsConnectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<DelegationsConnectionQuery, TError, TData>(
      ['DelegationsConnection.infinite', variables],
      (metaData) => fetcher<DelegationsConnectionQuery, DelegationsConnectionQueryVariables>(client, DelegationsConnectionDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const GlobalStateDocument = `
    query GlobalState {
  globalStateById(id: "0") {
    averageBlockTime
    height
    stakePoolValue
    totalValue
    vaultValue
    idleWorkerShares
  }
}
    `;
export const useGlobalStateQuery = <
      TData = GlobalStateQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GlobalStateQueryVariables,
      options?: UseQueryOptions<GlobalStateQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GlobalStateQuery, TError, TData>(
      variables === undefined ? ['GlobalState'] : ['GlobalState', variables],
      fetcher<GlobalStateQuery, GlobalStateQueryVariables>(client, GlobalStateDocument, variables, headers),
      options
    );
export const useInfiniteGlobalStateQuery = <
      TData = GlobalStateQuery,
      TError = unknown
    >(
      pageParamKey: keyof GlobalStateQueryVariables,
      client: GraphQLClient,
      variables?: GlobalStateQueryVariables,
      options?: UseInfiniteQueryOptions<GlobalStateQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<GlobalStateQuery, TError, TData>(
      variables === undefined ? ['GlobalState.infinite'] : ['GlobalState.infinite', variables],
      (metaData) => fetcher<GlobalStateQuery, GlobalStateQueryVariables>(client, GlobalStateDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );

export const TokenomicParametersDocument = `
    query TokenomicParameters {
  tokenomicParametersById(id: "0") {
    phaRate
    budgetPerBlock
    vMax
    treasuryRatio
    k
    re
  }
}
    `;
export const useTokenomicParametersQuery = <
      TData = TokenomicParametersQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: TokenomicParametersQueryVariables,
      options?: UseQueryOptions<TokenomicParametersQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<TokenomicParametersQuery, TError, TData>(
      variables === undefined ? ['TokenomicParameters'] : ['TokenomicParameters', variables],
      fetcher<TokenomicParametersQuery, TokenomicParametersQueryVariables>(client, TokenomicParametersDocument, variables, headers),
      options
    );
export const useInfiniteTokenomicParametersQuery = <
      TData = TokenomicParametersQuery,
      TError = unknown
    >(
      pageParamKey: keyof TokenomicParametersQueryVariables,
      client: GraphQLClient,
      variables?: TokenomicParametersQueryVariables,
      options?: UseInfiniteQueryOptions<TokenomicParametersQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useInfiniteQuery<TokenomicParametersQuery, TError, TData>(
      variables === undefined ? ['TokenomicParameters.infinite'] : ['TokenomicParameters.infinite', variables],
      (metaData) => fetcher<TokenomicParametersQuery, TokenomicParametersQueryVariables>(client, TokenomicParametersDocument, {...variables, ...(metaData.pageParam ? {[pageParamKey]: metaData.pageParam} : {})}, headers)(),
      options
    );
