/* eslint-disable */
// @ts-nocheck
/* This file is generated by graphql-codegen, don't edit it directly. */
import type { GraphQLClient } from 'graphql-request';
import type * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
type Maybe<T> = T | null;
type InputMaybe<T> = Maybe<T>;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: string;
  BigInt: string;
  DateTime: string;
};

type Account = {
  readonly __typename?: 'Account';
  readonly basePool?: Maybe<BasePool>;
  readonly delegations: ReadonlyArray<Delegation>;
  /** account address */
  readonly id: Scalars['String'];
  readonly identityDisplay?: Maybe<Scalars['String']>;
  readonly identityLevel?: Maybe<IdentityLevel>;
  readonly ownedPools: ReadonlyArray<BasePool>;
  readonly stakePoolAvgAprMultiplier: Scalars['BigDecimal'];
  readonly stakePoolNftCount: Scalars['Int'];
  readonly stakePoolValue: Scalars['BigDecimal'];
  readonly vaultAvgAprMultiplier: Scalars['BigDecimal'];
  readonly vaultNftCount: Scalars['Int'];
  readonly vaultValue: Scalars['BigDecimal'];
};


type AccountDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


type AccountOwnedPoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};

type AccountEdge = {
  readonly __typename?: 'AccountEdge';
  readonly cursor: Scalars['String'];
  readonly node: Account;
};

const AccountOrderByInput = {
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  IdentityDisplayAsc: 'identityDisplay_ASC',
  IdentityDisplayDesc: 'identityDisplay_DESC',
  IdentityLevelAsc: 'identityLevel_ASC',
  IdentityLevelDesc: 'identityLevel_DESC',
  StakePoolAvgAprMultiplierAsc: 'stakePoolAvgAprMultiplier_ASC',
  StakePoolAvgAprMultiplierDesc: 'stakePoolAvgAprMultiplier_DESC',
  StakePoolNftCountAsc: 'stakePoolNftCount_ASC',
  StakePoolNftCountDesc: 'stakePoolNftCount_DESC',
  StakePoolValueAsc: 'stakePoolValue_ASC',
  StakePoolValueDesc: 'stakePoolValue_DESC',
  VaultAvgAprMultiplierAsc: 'vaultAvgAprMultiplier_ASC',
  VaultAvgAprMultiplierDesc: 'vaultAvgAprMultiplier_DESC',
  VaultNftCountAsc: 'vaultNftCount_ASC',
  VaultNftCountDesc: 'vaultNftCount_DESC',
  VaultValueAsc: 'vaultValue_ASC',
  VaultValueDesc: 'vaultValue_DESC'
} as const;

export type AccountOrderByInput = typeof AccountOrderByInput[keyof typeof AccountOrderByInput];
type AccountWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<AccountWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<AccountWhereInput>>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly delegations_every?: InputMaybe<DelegationWhereInput>;
  readonly delegations_none?: InputMaybe<DelegationWhereInput>;
  readonly delegations_some?: InputMaybe<DelegationWhereInput>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_contains?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_endsWith?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_eq?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_gt?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_gte?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly identityDisplay_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly identityDisplay_lt?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_lte?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_not_contains?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_not_eq?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly identityDisplay_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly identityDisplay_startsWith?: InputMaybe<Scalars['String']>;
  readonly identityLevel_eq?: InputMaybe<IdentityLevel>;
  readonly identityLevel_in?: InputMaybe<ReadonlyArray<IdentityLevel>>;
  readonly identityLevel_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly identityLevel_not_eq?: InputMaybe<IdentityLevel>;
  readonly identityLevel_not_in?: InputMaybe<ReadonlyArray<IdentityLevel>>;
  readonly ownedPools_every?: InputMaybe<BasePoolWhereInput>;
  readonly ownedPools_none?: InputMaybe<BasePoolWhereInput>;
  readonly ownedPools_some?: InputMaybe<BasePoolWhereInput>;
  readonly stakePoolAvgAprMultiplier_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stakePoolAvgAprMultiplier_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly stakePoolAvgAprMultiplier_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolAvgAprMultiplier_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stakePoolNftCount_eq?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_gt?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_gte?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly stakePoolNftCount_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly stakePoolNftCount_lt?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_lte?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_not_eq?: InputMaybe<Scalars['Int']>;
  readonly stakePoolNftCount_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly stakePoolValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stakePoolValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly stakePoolValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stakePoolValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly vaultAvgAprMultiplier_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly vaultAvgAprMultiplier_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly vaultAvgAprMultiplier_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultAvgAprMultiplier_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly vaultNftCount_eq?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_gt?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_gte?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly vaultNftCount_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly vaultNftCount_lt?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_lte?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_not_eq?: InputMaybe<Scalars['Int']>;
  readonly vaultNftCount_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly vaultValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly vaultValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly vaultValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly vaultValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type AccountsConnection = {
  readonly __typename?: 'AccountsConnection';
  readonly edges: ReadonlyArray<AccountEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type BasePool = {
  readonly __typename?: 'BasePool';
  readonly account: Account;
  readonly aprMultiplier: Scalars['BigDecimal'];
  /** NFT collection id */
  readonly cid: Scalars['Int'];
  /** decimal percentage, 1 means 100% */
  readonly commission: Scalars['BigDecimal'];
  readonly delegations: ReadonlyArray<Delegation>;
  readonly delegatorCount: Scalars['Int'];
  readonly freeValue: Scalars['BigDecimal'];
  /** pid */
  readonly id: Scalars['String'];
  readonly kind: BasePoolKind;
  readonly owner: Account;
  /** numeric pid for sorting */
  readonly pid: Scalars['BigInt'];
  readonly releasingValue: Scalars['BigDecimal'];
  readonly sharePrice: Scalars['BigDecimal'];
  readonly stakePool?: Maybe<StakePool>;
  readonly totalShares: Scalars['BigDecimal'];
  readonly totalValue: Scalars['BigDecimal'];
  readonly vault?: Maybe<Vault>;
  readonly whitelistEnabled: Scalars['Boolean'];
  readonly whitelists: ReadonlyArray<BasePoolWhitelist>;
  readonly withdrawingShares: Scalars['BigDecimal'];
  readonly withdrawingValue: Scalars['BigDecimal'];
};


type BasePoolDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


type BasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};

type BasePoolAprRecord = {
  readonly __typename?: 'BasePoolAprRecord';
  readonly basePool: BasePool;
  readonly id: Scalars['String'];
  /** block time */
  readonly updatedTime: Scalars['DateTime'];
  readonly value: Scalars['BigDecimal'];
};

type BasePoolAprRecordEdge = {
  readonly __typename?: 'BasePoolAprRecordEdge';
  readonly cursor: Scalars['String'];
  readonly node: BasePoolAprRecord;
};

const BasePoolAprRecordOrderByInput = {
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  UpdatedTimeAsc: 'updatedTime_ASC',
  UpdatedTimeDesc: 'updatedTime_DESC',
  ValueAsc: 'value_ASC',
  ValueDesc: 'value_DESC'
} as const;

export type BasePoolAprRecordOrderByInput = typeof BasePoolAprRecordOrderByInput[keyof typeof BasePoolAprRecordOrderByInput];
type BasePoolAprRecordWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<BasePoolAprRecordWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<BasePoolAprRecordWhereInput>>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly updatedTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly updatedTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly updatedTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly value_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly value_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly value_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type BasePoolAprRecordsConnection = {
  readonly __typename?: 'BasePoolAprRecordsConnection';
  readonly edges: ReadonlyArray<BasePoolAprRecordEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type BasePoolEdge = {
  readonly __typename?: 'BasePoolEdge';
  readonly cursor: Scalars['String'];
  readonly node: BasePool;
};

const BasePoolKind = {
  StakePool: 'StakePool',
  Vault: 'Vault'
} as const;

export type BasePoolKind = typeof BasePoolKind[keyof typeof BasePoolKind];
const BasePoolOrderByInput = {
  AccountIdAsc: 'account_id_ASC',
  AccountIdDesc: 'account_id_DESC',
  AccountIdentityDisplayAsc: 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc: 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc: 'account_identityLevel_ASC',
  AccountIdentityLevelDesc: 'account_identityLevel_DESC',
  AccountStakePoolAvgAprMultiplierAsc: 'account_stakePoolAvgAprMultiplier_ASC',
  AccountStakePoolAvgAprMultiplierDesc: 'account_stakePoolAvgAprMultiplier_DESC',
  AccountStakePoolNftCountAsc: 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc: 'account_stakePoolNftCount_DESC',
  AccountStakePoolValueAsc: 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc: 'account_stakePoolValue_DESC',
  AccountVaultAvgAprMultiplierAsc: 'account_vaultAvgAprMultiplier_ASC',
  AccountVaultAvgAprMultiplierDesc: 'account_vaultAvgAprMultiplier_DESC',
  AccountVaultNftCountAsc: 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc: 'account_vaultNftCount_DESC',
  AccountVaultValueAsc: 'account_vaultValue_ASC',
  AccountVaultValueDesc: 'account_vaultValue_DESC',
  AprMultiplierAsc: 'aprMultiplier_ASC',
  AprMultiplierDesc: 'aprMultiplier_DESC',
  CidAsc: 'cid_ASC',
  CidDesc: 'cid_DESC',
  CommissionAsc: 'commission_ASC',
  CommissionDesc: 'commission_DESC',
  DelegatorCountAsc: 'delegatorCount_ASC',
  DelegatorCountDesc: 'delegatorCount_DESC',
  FreeValueAsc: 'freeValue_ASC',
  FreeValueDesc: 'freeValue_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  KindAsc: 'kind_ASC',
  KindDesc: 'kind_DESC',
  OwnerIdAsc: 'owner_id_ASC',
  OwnerIdDesc: 'owner_id_DESC',
  OwnerIdentityDisplayAsc: 'owner_identityDisplay_ASC',
  OwnerIdentityDisplayDesc: 'owner_identityDisplay_DESC',
  OwnerIdentityLevelAsc: 'owner_identityLevel_ASC',
  OwnerIdentityLevelDesc: 'owner_identityLevel_DESC',
  OwnerStakePoolAvgAprMultiplierAsc: 'owner_stakePoolAvgAprMultiplier_ASC',
  OwnerStakePoolAvgAprMultiplierDesc: 'owner_stakePoolAvgAprMultiplier_DESC',
  OwnerStakePoolNftCountAsc: 'owner_stakePoolNftCount_ASC',
  OwnerStakePoolNftCountDesc: 'owner_stakePoolNftCount_DESC',
  OwnerStakePoolValueAsc: 'owner_stakePoolValue_ASC',
  OwnerStakePoolValueDesc: 'owner_stakePoolValue_DESC',
  OwnerVaultAvgAprMultiplierAsc: 'owner_vaultAvgAprMultiplier_ASC',
  OwnerVaultAvgAprMultiplierDesc: 'owner_vaultAvgAprMultiplier_DESC',
  OwnerVaultNftCountAsc: 'owner_vaultNftCount_ASC',
  OwnerVaultNftCountDesc: 'owner_vaultNftCount_DESC',
  OwnerVaultValueAsc: 'owner_vaultValue_ASC',
  OwnerVaultValueDesc: 'owner_vaultValue_DESC',
  PidAsc: 'pid_ASC',
  PidDesc: 'pid_DESC',
  ReleasingValueAsc: 'releasingValue_ASC',
  ReleasingValueDesc: 'releasingValue_DESC',
  SharePriceAsc: 'sharePrice_ASC',
  SharePriceDesc: 'sharePrice_DESC',
  StakePoolCapacityAsc: 'stakePool_capacity_ASC',
  StakePoolCapacityDesc: 'stakePool_capacity_DESC',
  StakePoolDelegableAsc: 'stakePool_delegable_ASC',
  StakePoolDelegableDesc: 'stakePool_delegable_DESC',
  StakePoolIdAsc: 'stakePool_id_ASC',
  StakePoolIdDesc: 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc: 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc: 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc: 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc: 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc: 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc: 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc: 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc: 'stakePool_workerCount_DESC',
  TotalSharesAsc: 'totalShares_ASC',
  TotalSharesDesc: 'totalShares_DESC',
  TotalValueAsc: 'totalValue_ASC',
  TotalValueDesc: 'totalValue_DESC',
  VaultClaimableOwnerSharesAsc: 'vault_claimableOwnerShares_ASC',
  VaultClaimableOwnerSharesDesc: 'vault_claimableOwnerShares_DESC',
  VaultIdAsc: 'vault_id_ASC',
  VaultIdDesc: 'vault_id_DESC',
  VaultLastSharePriceCheckpointAsc: 'vault_lastSharePriceCheckpoint_ASC',
  VaultLastSharePriceCheckpointDesc: 'vault_lastSharePriceCheckpoint_DESC',
  WhitelistEnabledAsc: 'whitelistEnabled_ASC',
  WhitelistEnabledDesc: 'whitelistEnabled_DESC',
  WithdrawingSharesAsc: 'withdrawingShares_ASC',
  WithdrawingSharesDesc: 'withdrawingShares_DESC',
  WithdrawingValueAsc: 'withdrawingValue_ASC',
  WithdrawingValueDesc: 'withdrawingValue_DESC'
} as const;

export type BasePoolOrderByInput = typeof BasePoolOrderByInput[keyof typeof BasePoolOrderByInput];
type BasePoolWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<BasePoolWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<BasePoolWhereInput>>;
  readonly account?: InputMaybe<AccountWhereInput>;
  readonly account_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly aprMultiplier_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly aprMultiplier_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly aprMultiplier_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly aprMultiplier_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly cid_eq?: InputMaybe<Scalars['Int']>;
  readonly cid_gt?: InputMaybe<Scalars['Int']>;
  readonly cid_gte?: InputMaybe<Scalars['Int']>;
  readonly cid_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly cid_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly cid_lt?: InputMaybe<Scalars['Int']>;
  readonly cid_lte?: InputMaybe<Scalars['Int']>;
  readonly cid_not_eq?: InputMaybe<Scalars['Int']>;
  readonly cid_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly commission_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly commission_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly commission_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly commission_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly delegations_every?: InputMaybe<DelegationWhereInput>;
  readonly delegations_none?: InputMaybe<DelegationWhereInput>;
  readonly delegations_some?: InputMaybe<DelegationWhereInput>;
  readonly delegatorCount_eq?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_gt?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_gte?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly delegatorCount_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly delegatorCount_lt?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_lte?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_not_eq?: InputMaybe<Scalars['Int']>;
  readonly delegatorCount_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly freeValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly freeValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly freeValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly freeValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly kind_eq?: InputMaybe<BasePoolKind>;
  readonly kind_in?: InputMaybe<ReadonlyArray<BasePoolKind>>;
  readonly kind_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly kind_not_eq?: InputMaybe<BasePoolKind>;
  readonly kind_not_in?: InputMaybe<ReadonlyArray<BasePoolKind>>;
  readonly owner?: InputMaybe<AccountWhereInput>;
  readonly owner_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly pid_eq?: InputMaybe<Scalars['BigInt']>;
  readonly pid_gt?: InputMaybe<Scalars['BigInt']>;
  readonly pid_gte?: InputMaybe<Scalars['BigInt']>;
  readonly pid_in?: InputMaybe<ReadonlyArray<Scalars['BigInt']>>;
  readonly pid_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly pid_lt?: InputMaybe<Scalars['BigInt']>;
  readonly pid_lte?: InputMaybe<Scalars['BigInt']>;
  readonly pid_not_eq?: InputMaybe<Scalars['BigInt']>;
  readonly pid_not_in?: InputMaybe<ReadonlyArray<Scalars['BigInt']>>;
  readonly releasingValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly releasingValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly releasingValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly releasingValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly sharePrice_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly sharePrice_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly sharePrice_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly sharePrice_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stakePool?: InputMaybe<StakePoolWhereInput>;
  readonly stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly totalShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly totalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly vault?: InputMaybe<VaultWhereInput>;
  readonly vault_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly whitelistEnabled_eq?: InputMaybe<Scalars['Boolean']>;
  readonly whitelistEnabled_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly whitelistEnabled_not_eq?: InputMaybe<Scalars['Boolean']>;
  readonly whitelists_every?: InputMaybe<BasePoolWhitelistWhereInput>;
  readonly whitelists_none?: InputMaybe<BasePoolWhitelistWhereInput>;
  readonly whitelists_some?: InputMaybe<BasePoolWhitelistWhereInput>;
  readonly withdrawingShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawingShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawingValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type BasePoolWhitelist = {
  readonly __typename?: 'BasePoolWhitelist';
  readonly account: Account;
  readonly basePool: BasePool;
  readonly createTime: Scalars['DateTime'];
  /** ${pid}-${accountId} */
  readonly id: Scalars['String'];
};

type BasePoolWhitelistEdge = {
  readonly __typename?: 'BasePoolWhitelistEdge';
  readonly cursor: Scalars['String'];
  readonly node: BasePoolWhitelist;
};

const BasePoolWhitelistOrderByInput = {
  AccountIdAsc: 'account_id_ASC',
  AccountIdDesc: 'account_id_DESC',
  AccountIdentityDisplayAsc: 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc: 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc: 'account_identityLevel_ASC',
  AccountIdentityLevelDesc: 'account_identityLevel_DESC',
  AccountStakePoolAvgAprMultiplierAsc: 'account_stakePoolAvgAprMultiplier_ASC',
  AccountStakePoolAvgAprMultiplierDesc: 'account_stakePoolAvgAprMultiplier_DESC',
  AccountStakePoolNftCountAsc: 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc: 'account_stakePoolNftCount_DESC',
  AccountStakePoolValueAsc: 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc: 'account_stakePoolValue_DESC',
  AccountVaultAvgAprMultiplierAsc: 'account_vaultAvgAprMultiplier_ASC',
  AccountVaultAvgAprMultiplierDesc: 'account_vaultAvgAprMultiplier_DESC',
  AccountVaultNftCountAsc: 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc: 'account_vaultNftCount_DESC',
  AccountVaultValueAsc: 'account_vaultValue_ASC',
  AccountVaultValueDesc: 'account_vaultValue_DESC',
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  CreateTimeAsc: 'createTime_ASC',
  CreateTimeDesc: 'createTime_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC'
} as const;

export type BasePoolWhitelistOrderByInput = typeof BasePoolWhitelistOrderByInput[keyof typeof BasePoolWhitelistOrderByInput];
type BasePoolWhitelistWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<BasePoolWhitelistWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<BasePoolWhitelistWhereInput>>;
  readonly account?: InputMaybe<AccountWhereInput>;
  readonly account_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly createTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly createTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly createTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly createTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
};

type BasePoolWhitelistsConnection = {
  readonly __typename?: 'BasePoolWhitelistsConnection';
  readonly edges: ReadonlyArray<BasePoolWhitelistEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type BasePoolsConnection = {
  readonly __typename?: 'BasePoolsConnection';
  readonly edges: ReadonlyArray<BasePoolEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type Delegation = {
  readonly __typename?: 'Delegation';
  readonly account: Account;
  readonly basePool: BasePool;
  readonly delegationNft?: Maybe<Nft>;
  /** ${pid}-${accountId} */
  readonly id: Scalars['String'];
  readonly shares: Scalars['BigDecimal'];
  readonly value: Scalars['BigDecimal'];
  readonly withdrawalNft?: Maybe<Nft>;
  readonly withdrawalStartTime?: Maybe<Scalars['DateTime']>;
  readonly withdrawingShares: Scalars['BigDecimal'];
  readonly withdrawingValue: Scalars['BigDecimal'];
};

type DelegationEdge = {
  readonly __typename?: 'DelegationEdge';
  readonly cursor: Scalars['String'];
  readonly node: Delegation;
};

const DelegationOrderByInput = {
  AccountIdAsc: 'account_id_ASC',
  AccountIdDesc: 'account_id_DESC',
  AccountIdentityDisplayAsc: 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc: 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc: 'account_identityLevel_ASC',
  AccountIdentityLevelDesc: 'account_identityLevel_DESC',
  AccountStakePoolAvgAprMultiplierAsc: 'account_stakePoolAvgAprMultiplier_ASC',
  AccountStakePoolAvgAprMultiplierDesc: 'account_stakePoolAvgAprMultiplier_DESC',
  AccountStakePoolNftCountAsc: 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc: 'account_stakePoolNftCount_DESC',
  AccountStakePoolValueAsc: 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc: 'account_stakePoolValue_DESC',
  AccountVaultAvgAprMultiplierAsc: 'account_vaultAvgAprMultiplier_ASC',
  AccountVaultAvgAprMultiplierDesc: 'account_vaultAvgAprMultiplier_DESC',
  AccountVaultNftCountAsc: 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc: 'account_vaultNftCount_DESC',
  AccountVaultValueAsc: 'account_vaultValue_ASC',
  AccountVaultValueDesc: 'account_vaultValue_DESC',
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  DelegationNftBurnedAsc: 'delegationNft_burned_ASC',
  DelegationNftBurnedDesc: 'delegationNft_burned_DESC',
  DelegationNftCidAsc: 'delegationNft_cid_ASC',
  DelegationNftCidDesc: 'delegationNft_cid_DESC',
  DelegationNftIdAsc: 'delegationNft_id_ASC',
  DelegationNftIdDesc: 'delegationNft_id_DESC',
  DelegationNftMintTimeAsc: 'delegationNft_mintTime_ASC',
  DelegationNftMintTimeDesc: 'delegationNft_mintTime_DESC',
  DelegationNftNftIdAsc: 'delegationNft_nftId_ASC',
  DelegationNftNftIdDesc: 'delegationNft_nftId_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  SharesAsc: 'shares_ASC',
  SharesDesc: 'shares_DESC',
  ValueAsc: 'value_ASC',
  ValueDesc: 'value_DESC',
  WithdrawalNftBurnedAsc: 'withdrawalNft_burned_ASC',
  WithdrawalNftBurnedDesc: 'withdrawalNft_burned_DESC',
  WithdrawalNftCidAsc: 'withdrawalNft_cid_ASC',
  WithdrawalNftCidDesc: 'withdrawalNft_cid_DESC',
  WithdrawalNftIdAsc: 'withdrawalNft_id_ASC',
  WithdrawalNftIdDesc: 'withdrawalNft_id_DESC',
  WithdrawalNftMintTimeAsc: 'withdrawalNft_mintTime_ASC',
  WithdrawalNftMintTimeDesc: 'withdrawalNft_mintTime_DESC',
  WithdrawalNftNftIdAsc: 'withdrawalNft_nftId_ASC',
  WithdrawalNftNftIdDesc: 'withdrawalNft_nftId_DESC',
  WithdrawalStartTimeAsc: 'withdrawalStartTime_ASC',
  WithdrawalStartTimeDesc: 'withdrawalStartTime_DESC',
  WithdrawingSharesAsc: 'withdrawingShares_ASC',
  WithdrawingSharesDesc: 'withdrawingShares_DESC',
  WithdrawingValueAsc: 'withdrawingValue_ASC',
  WithdrawingValueDesc: 'withdrawingValue_DESC'
} as const;

export type DelegationOrderByInput = typeof DelegationOrderByInput[keyof typeof DelegationOrderByInput];
type DelegationValueRecord = {
  readonly __typename?: 'DelegationValueRecord';
  readonly account: Account;
  readonly id: Scalars['String'];
  /** block time */
  readonly updatedTime: Scalars['DateTime'];
  readonly value: Scalars['BigDecimal'];
};

type DelegationValueRecordEdge = {
  readonly __typename?: 'DelegationValueRecordEdge';
  readonly cursor: Scalars['String'];
  readonly node: DelegationValueRecord;
};

const DelegationValueRecordOrderByInput = {
  AccountIdAsc: 'account_id_ASC',
  AccountIdDesc: 'account_id_DESC',
  AccountIdentityDisplayAsc: 'account_identityDisplay_ASC',
  AccountIdentityDisplayDesc: 'account_identityDisplay_DESC',
  AccountIdentityLevelAsc: 'account_identityLevel_ASC',
  AccountIdentityLevelDesc: 'account_identityLevel_DESC',
  AccountStakePoolAvgAprMultiplierAsc: 'account_stakePoolAvgAprMultiplier_ASC',
  AccountStakePoolAvgAprMultiplierDesc: 'account_stakePoolAvgAprMultiplier_DESC',
  AccountStakePoolNftCountAsc: 'account_stakePoolNftCount_ASC',
  AccountStakePoolNftCountDesc: 'account_stakePoolNftCount_DESC',
  AccountStakePoolValueAsc: 'account_stakePoolValue_ASC',
  AccountStakePoolValueDesc: 'account_stakePoolValue_DESC',
  AccountVaultAvgAprMultiplierAsc: 'account_vaultAvgAprMultiplier_ASC',
  AccountVaultAvgAprMultiplierDesc: 'account_vaultAvgAprMultiplier_DESC',
  AccountVaultNftCountAsc: 'account_vaultNftCount_ASC',
  AccountVaultNftCountDesc: 'account_vaultNftCount_DESC',
  AccountVaultValueAsc: 'account_vaultValue_ASC',
  AccountVaultValueDesc: 'account_vaultValue_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  UpdatedTimeAsc: 'updatedTime_ASC',
  UpdatedTimeDesc: 'updatedTime_DESC',
  ValueAsc: 'value_ASC',
  ValueDesc: 'value_DESC'
} as const;

export type DelegationValueRecordOrderByInput = typeof DelegationValueRecordOrderByInput[keyof typeof DelegationValueRecordOrderByInput];
type DelegationValueRecordWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<DelegationValueRecordWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<DelegationValueRecordWhereInput>>;
  readonly account?: InputMaybe<AccountWhereInput>;
  readonly account_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly updatedTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly updatedTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly updatedTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly updatedTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly value_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly value_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly value_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type DelegationValueRecordsConnection = {
  readonly __typename?: 'DelegationValueRecordsConnection';
  readonly edges: ReadonlyArray<DelegationValueRecordEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type DelegationWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<DelegationWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<DelegationWhereInput>>;
  readonly account?: InputMaybe<AccountWhereInput>;
  readonly account_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly delegationNft?: InputMaybe<NftWhereInput>;
  readonly delegationNft_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly shares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly shares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly value_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly value_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly value_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawalNft?: InputMaybe<NftWhereInput>;
  readonly withdrawalNft_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawalStartTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly withdrawalStartTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawalStartTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly withdrawalStartTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly withdrawingShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawingShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly withdrawingValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly withdrawingValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly withdrawingValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type DelegationsConnection = {
  readonly __typename?: 'DelegationsConnection';
  readonly edges: ReadonlyArray<DelegationEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type GlobalState = {
  readonly __typename?: 'GlobalState';
  readonly averageAprMultiplier: Scalars['BigDecimal'];
  readonly averageAprMultiplierUpdatedTime: Scalars['DateTime'];
  readonly averageBlockTime: Scalars['Int'];
  readonly averageBlockTimeUpdatedHeight: Scalars['Int'];
  readonly averageBlockTimeUpdatedTime: Scalars['DateTime'];
  readonly height: Scalars['Int'];
  /** constant 0 */
  readonly id: Scalars['String'];
  /** for apr calculation */
  readonly idleWorkerShares: Scalars['BigDecimal'];
  readonly totalValue: Scalars['BigDecimal'];
};

type GlobalStateEdge = {
  readonly __typename?: 'GlobalStateEdge';
  readonly cursor: Scalars['String'];
  readonly node: GlobalState;
};

const GlobalStateOrderByInput = {
  AverageAprMultiplierUpdatedTimeAsc: 'averageAprMultiplierUpdatedTime_ASC',
  AverageAprMultiplierUpdatedTimeDesc: 'averageAprMultiplierUpdatedTime_DESC',
  AverageAprMultiplierAsc: 'averageAprMultiplier_ASC',
  AverageAprMultiplierDesc: 'averageAprMultiplier_DESC',
  AverageBlockTimeUpdatedHeightAsc: 'averageBlockTimeUpdatedHeight_ASC',
  AverageBlockTimeUpdatedHeightDesc: 'averageBlockTimeUpdatedHeight_DESC',
  AverageBlockTimeUpdatedTimeAsc: 'averageBlockTimeUpdatedTime_ASC',
  AverageBlockTimeUpdatedTimeDesc: 'averageBlockTimeUpdatedTime_DESC',
  AverageBlockTimeAsc: 'averageBlockTime_ASC',
  AverageBlockTimeDesc: 'averageBlockTime_DESC',
  HeightAsc: 'height_ASC',
  HeightDesc: 'height_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  IdleWorkerSharesAsc: 'idleWorkerShares_ASC',
  IdleWorkerSharesDesc: 'idleWorkerShares_DESC',
  TotalValueAsc: 'totalValue_ASC',
  TotalValueDesc: 'totalValue_DESC'
} as const;

export type GlobalStateOrderByInput = typeof GlobalStateOrderByInput[keyof typeof GlobalStateOrderByInput];
type GlobalStateWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<GlobalStateWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<GlobalStateWhereInput>>;
  readonly averageAprMultiplierUpdatedTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly averageAprMultiplierUpdatedTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly averageAprMultiplierUpdatedTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly averageAprMultiplierUpdatedTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly averageAprMultiplier_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly averageAprMultiplier_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly averageAprMultiplier_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly averageAprMultiplier_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly averageBlockTimeUpdatedHeight_eq?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_gt?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_gte?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly averageBlockTimeUpdatedHeight_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly averageBlockTimeUpdatedHeight_lt?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_lte?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_not_eq?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTimeUpdatedHeight_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly averageBlockTimeUpdatedTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly averageBlockTimeUpdatedTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly averageBlockTimeUpdatedTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly averageBlockTimeUpdatedTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly averageBlockTime_eq?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_gt?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_gte?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly averageBlockTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly averageBlockTime_lt?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_lte?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_not_eq?: InputMaybe<Scalars['Int']>;
  readonly averageBlockTime_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly height_eq?: InputMaybe<Scalars['Int']>;
  readonly height_gt?: InputMaybe<Scalars['Int']>;
  readonly height_gte?: InputMaybe<Scalars['Int']>;
  readonly height_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly height_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly height_lt?: InputMaybe<Scalars['Int']>;
  readonly height_lte?: InputMaybe<Scalars['Int']>;
  readonly height_not_eq?: InputMaybe<Scalars['Int']>;
  readonly height_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly idleWorkerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly idleWorkerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly idleWorkerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalValue_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalValue_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly totalValue_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalValue_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type GlobalStatesConnection = {
  readonly __typename?: 'GlobalStatesConnection';
  readonly edges: ReadonlyArray<GlobalStateEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

const IdentityLevel = {
  Erroneous: 'Erroneous',
  FeePaid: 'FeePaid',
  KnownGood: 'KnownGood',
  LowQuality: 'LowQuality',
  OutOfDate: 'OutOfDate',
  Reasonable: 'Reasonable',
  Unknown: 'Unknown'
} as const;

export type IdentityLevel = typeof IdentityLevel[keyof typeof IdentityLevel];
type Nft = {
  readonly __typename?: 'Nft';
  readonly burned: Scalars['Boolean'];
  readonly cid: Scalars['Int'];
  /** ${cid}-${nftId} */
  readonly id: Scalars['String'];
  readonly mintTime: Scalars['DateTime'];
  readonly nftId: Scalars['Int'];
  readonly owner: Account;
};

type NftEdge = {
  readonly __typename?: 'NftEdge';
  readonly cursor: Scalars['String'];
  readonly node: Nft;
};

const NftOrderByInput = {
  BurnedAsc: 'burned_ASC',
  BurnedDesc: 'burned_DESC',
  CidAsc: 'cid_ASC',
  CidDesc: 'cid_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  MintTimeAsc: 'mintTime_ASC',
  MintTimeDesc: 'mintTime_DESC',
  NftIdAsc: 'nftId_ASC',
  NftIdDesc: 'nftId_DESC',
  OwnerIdAsc: 'owner_id_ASC',
  OwnerIdDesc: 'owner_id_DESC',
  OwnerIdentityDisplayAsc: 'owner_identityDisplay_ASC',
  OwnerIdentityDisplayDesc: 'owner_identityDisplay_DESC',
  OwnerIdentityLevelAsc: 'owner_identityLevel_ASC',
  OwnerIdentityLevelDesc: 'owner_identityLevel_DESC',
  OwnerStakePoolAvgAprMultiplierAsc: 'owner_stakePoolAvgAprMultiplier_ASC',
  OwnerStakePoolAvgAprMultiplierDesc: 'owner_stakePoolAvgAprMultiplier_DESC',
  OwnerStakePoolNftCountAsc: 'owner_stakePoolNftCount_ASC',
  OwnerStakePoolNftCountDesc: 'owner_stakePoolNftCount_DESC',
  OwnerStakePoolValueAsc: 'owner_stakePoolValue_ASC',
  OwnerStakePoolValueDesc: 'owner_stakePoolValue_DESC',
  OwnerVaultAvgAprMultiplierAsc: 'owner_vaultAvgAprMultiplier_ASC',
  OwnerVaultAvgAprMultiplierDesc: 'owner_vaultAvgAprMultiplier_DESC',
  OwnerVaultNftCountAsc: 'owner_vaultNftCount_ASC',
  OwnerVaultNftCountDesc: 'owner_vaultNftCount_DESC',
  OwnerVaultValueAsc: 'owner_vaultValue_ASC',
  OwnerVaultValueDesc: 'owner_vaultValue_DESC'
} as const;

export type NftOrderByInput = typeof NftOrderByInput[keyof typeof NftOrderByInput];
type NftWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<NftWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<NftWhereInput>>;
  readonly burned_eq?: InputMaybe<Scalars['Boolean']>;
  readonly burned_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly burned_not_eq?: InputMaybe<Scalars['Boolean']>;
  readonly cid_eq?: InputMaybe<Scalars['Int']>;
  readonly cid_gt?: InputMaybe<Scalars['Int']>;
  readonly cid_gte?: InputMaybe<Scalars['Int']>;
  readonly cid_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly cid_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly cid_lt?: InputMaybe<Scalars['Int']>;
  readonly cid_lte?: InputMaybe<Scalars['Int']>;
  readonly cid_not_eq?: InputMaybe<Scalars['Int']>;
  readonly cid_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly mintTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly mintTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly mintTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly mintTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly nftId_eq?: InputMaybe<Scalars['Int']>;
  readonly nftId_gt?: InputMaybe<Scalars['Int']>;
  readonly nftId_gte?: InputMaybe<Scalars['Int']>;
  readonly nftId_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly nftId_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly nftId_lt?: InputMaybe<Scalars['Int']>;
  readonly nftId_lte?: InputMaybe<Scalars['Int']>;
  readonly nftId_not_eq?: InputMaybe<Scalars['Int']>;
  readonly nftId_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly owner?: InputMaybe<AccountWhereInput>;
  readonly owner_isNull?: InputMaybe<Scalars['Boolean']>;
};

type NftsConnection = {
  readonly __typename?: 'NftsConnection';
  readonly edges: ReadonlyArray<NftEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type PageInfo = {
  readonly __typename?: 'PageInfo';
  readonly endCursor: Scalars['String'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly startCursor: Scalars['String'];
};

type Query = {
  readonly __typename?: 'Query';
  readonly accountById?: Maybe<Account>;
  /** @deprecated Use accountById */
  readonly accountByUniqueInput?: Maybe<Account>;
  readonly accounts: ReadonlyArray<Account>;
  readonly accountsConnection: AccountsConnection;
  readonly basePoolAprRecordById?: Maybe<BasePoolAprRecord>;
  /** @deprecated Use basePoolAprRecordById */
  readonly basePoolAprRecordByUniqueInput?: Maybe<BasePoolAprRecord>;
  readonly basePoolAprRecords: ReadonlyArray<BasePoolAprRecord>;
  readonly basePoolAprRecordsConnection: BasePoolAprRecordsConnection;
  readonly basePoolById?: Maybe<BasePool>;
  /** @deprecated Use basePoolById */
  readonly basePoolByUniqueInput?: Maybe<BasePool>;
  readonly basePoolWhitelistById?: Maybe<BasePoolWhitelist>;
  /** @deprecated Use basePoolWhitelistById */
  readonly basePoolWhitelistByUniqueInput?: Maybe<BasePoolWhitelist>;
  readonly basePoolWhitelists: ReadonlyArray<BasePoolWhitelist>;
  readonly basePoolWhitelistsConnection: BasePoolWhitelistsConnection;
  readonly basePools: ReadonlyArray<BasePool>;
  readonly basePoolsConnection: BasePoolsConnection;
  readonly delegationById?: Maybe<Delegation>;
  /** @deprecated Use delegationById */
  readonly delegationByUniqueInput?: Maybe<Delegation>;
  readonly delegationValueRecordById?: Maybe<DelegationValueRecord>;
  /** @deprecated Use delegationValueRecordById */
  readonly delegationValueRecordByUniqueInput?: Maybe<DelegationValueRecord>;
  readonly delegationValueRecords: ReadonlyArray<DelegationValueRecord>;
  readonly delegationValueRecordsConnection: DelegationValueRecordsConnection;
  readonly delegations: ReadonlyArray<Delegation>;
  readonly delegationsConnection: DelegationsConnection;
  readonly globalStateById?: Maybe<GlobalState>;
  /** @deprecated Use globalStateById */
  readonly globalStateByUniqueInput?: Maybe<GlobalState>;
  readonly globalStates: ReadonlyArray<GlobalState>;
  readonly globalStatesConnection: GlobalStatesConnection;
  readonly nftById?: Maybe<Nft>;
  /** @deprecated Use nftById */
  readonly nftByUniqueInput?: Maybe<Nft>;
  readonly nfts: ReadonlyArray<Nft>;
  readonly nftsConnection: NftsConnection;
  readonly rewardRecordById?: Maybe<RewardRecord>;
  /** @deprecated Use rewardRecordById */
  readonly rewardRecordByUniqueInput?: Maybe<RewardRecord>;
  readonly rewardRecords: ReadonlyArray<RewardRecord>;
  readonly rewardRecordsConnection: RewardRecordsConnection;
  readonly sessionById?: Maybe<Session>;
  /** @deprecated Use sessionById */
  readonly sessionByUniqueInput?: Maybe<Session>;
  readonly sessions: ReadonlyArray<Session>;
  readonly sessionsConnection: SessionsConnection;
  readonly squidStatus?: Maybe<SquidStatus>;
  readonly stakePoolById?: Maybe<StakePool>;
  /** @deprecated Use stakePoolById */
  readonly stakePoolByUniqueInput?: Maybe<StakePool>;
  readonly stakePools: ReadonlyArray<StakePool>;
  readonly stakePoolsConnection: StakePoolsConnection;
  readonly vaultById?: Maybe<Vault>;
  /** @deprecated Use vaultById */
  readonly vaultByUniqueInput?: Maybe<Vault>;
  readonly vaults: ReadonlyArray<Vault>;
  readonly vaultsConnection: VaultsConnection;
  readonly workerById?: Maybe<Worker>;
  /** @deprecated Use workerById */
  readonly workerByUniqueInput?: Maybe<Worker>;
  readonly workers: ReadonlyArray<Worker>;
  readonly workersConnection: WorkersConnection;
};


type QueryAccountByIdArgs = {
  id: Scalars['String'];
};


type QueryAccountByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryAccountsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<AccountOrderByInput>>;
  where?: InputMaybe<AccountWhereInput>;
};


type QueryAccountsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<AccountOrderByInput>;
  where?: InputMaybe<AccountWhereInput>;
};


type QueryBasePoolAprRecordByIdArgs = {
  id: Scalars['String'];
};


type QueryBasePoolAprRecordByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryBasePoolAprRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolAprRecordOrderByInput>>;
  where?: InputMaybe<BasePoolAprRecordWhereInput>;
};


type QueryBasePoolAprRecordsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<BasePoolAprRecordOrderByInput>;
  where?: InputMaybe<BasePoolAprRecordWhereInput>;
};


type QueryBasePoolByIdArgs = {
  id: Scalars['String'];
};


type QueryBasePoolByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryBasePoolWhitelistByIdArgs = {
  id: Scalars['String'];
};


type QueryBasePoolWhitelistByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryBasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


type QueryBasePoolWhitelistsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<BasePoolWhitelistOrderByInput>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


type QueryBasePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};


type QueryBasePoolsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<BasePoolOrderByInput>;
  where?: InputMaybe<BasePoolWhereInput>;
};


type QueryDelegationByIdArgs = {
  id: Scalars['String'];
};


type QueryDelegationByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryDelegationValueRecordByIdArgs = {
  id: Scalars['String'];
};


type QueryDelegationValueRecordByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryDelegationValueRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationValueRecordOrderByInput>>;
  where?: InputMaybe<DelegationValueRecordWhereInput>;
};


type QueryDelegationValueRecordsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<DelegationValueRecordOrderByInput>;
  where?: InputMaybe<DelegationValueRecordWhereInput>;
};


type QueryDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


type QueryDelegationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<DelegationOrderByInput>;
  where?: InputMaybe<DelegationWhereInput>;
};


type QueryGlobalStateByIdArgs = {
  id: Scalars['String'];
};


type QueryGlobalStateByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryGlobalStatesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<GlobalStateOrderByInput>>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


type QueryGlobalStatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<GlobalStateOrderByInput>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


type QueryNftByIdArgs = {
  id: Scalars['String'];
};


type QueryNftByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryNftsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<NftOrderByInput>>;
  where?: InputMaybe<NftWhereInput>;
};


type QueryNftsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<NftOrderByInput>;
  where?: InputMaybe<NftWhereInput>;
};


type QueryRewardRecordByIdArgs = {
  id: Scalars['String'];
};


type QueryRewardRecordByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryRewardRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<RewardRecordOrderByInput>>;
  where?: InputMaybe<RewardRecordWhereInput>;
};


type QueryRewardRecordsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<RewardRecordOrderByInput>;
  where?: InputMaybe<RewardRecordWhereInput>;
};


type QuerySessionByIdArgs = {
  id: Scalars['String'];
};


type QuerySessionByUniqueInputArgs = {
  where: WhereIdInput;
};


type QuerySessionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<SessionOrderByInput>>;
  where?: InputMaybe<SessionWhereInput>;
};


type QuerySessionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<SessionOrderByInput>;
  where?: InputMaybe<SessionWhereInput>;
};


type QueryStakePoolByIdArgs = {
  id: Scalars['String'];
};


type QueryStakePoolByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryStakePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<StakePoolOrderByInput>>;
  where?: InputMaybe<StakePoolWhereInput>;
};


type QueryStakePoolsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<StakePoolOrderByInput>;
  where?: InputMaybe<StakePoolWhereInput>;
};


type QueryVaultByIdArgs = {
  id: Scalars['String'];
};


type QueryVaultByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryVaultsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<VaultOrderByInput>>;
  where?: InputMaybe<VaultWhereInput>;
};


type QueryVaultsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<VaultOrderByInput>;
  where?: InputMaybe<VaultWhereInput>;
};


type QueryWorkerByIdArgs = {
  id: Scalars['String'];
};


type QueryWorkerByUniqueInputArgs = {
  where: WhereIdInput;
};


type QueryWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<WorkerOrderByInput>>;
  where?: InputMaybe<WorkerWhereInput>;
};


type QueryWorkersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy: ReadonlyArray<WorkerOrderByInput>;
  where?: InputMaybe<WorkerWhereInput>;
};

type RewardRecord = {
  readonly __typename?: 'RewardRecord';
  readonly id: Scalars['String'];
  /** block time */
  readonly time: Scalars['DateTime'];
  readonly value: Scalars['BigDecimal'];
};

type RewardRecordEdge = {
  readonly __typename?: 'RewardRecordEdge';
  readonly cursor: Scalars['String'];
  readonly node: RewardRecord;
};

const RewardRecordOrderByInput = {
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  TimeAsc: 'time_ASC',
  TimeDesc: 'time_DESC',
  ValueAsc: 'value_ASC',
  ValueDesc: 'value_DESC'
} as const;

export type RewardRecordOrderByInput = typeof RewardRecordOrderByInput[keyof typeof RewardRecordOrderByInput];
type RewardRecordWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<RewardRecordWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<RewardRecordWhereInput>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly time_eq?: InputMaybe<Scalars['DateTime']>;
  readonly time_gt?: InputMaybe<Scalars['DateTime']>;
  readonly time_gte?: InputMaybe<Scalars['DateTime']>;
  readonly time_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly time_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly time_lt?: InputMaybe<Scalars['DateTime']>;
  readonly time_lte?: InputMaybe<Scalars['DateTime']>;
  readonly time_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly time_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly value_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly value_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly value_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly value_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type RewardRecordsConnection = {
  readonly __typename?: 'RewardRecordsConnection';
  readonly edges: ReadonlyArray<RewardRecordEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type Session = {
  readonly __typename?: 'Session';
  readonly coolingDownStartTime?: Maybe<Scalars['DateTime']>;
  /** session account address */
  readonly id: Scalars['String'];
  readonly isBound: Scalars['Boolean'];
  readonly pInit: Scalars['Int'];
  readonly pInstant: Scalars['Int'];
  readonly stake: Scalars['BigDecimal'];
  readonly stakePool?: Maybe<StakePool>;
  readonly state: WorkerState;
  readonly totalReward: Scalars['BigDecimal'];
  readonly v: Scalars['BigDecimal'];
  readonly ve: Scalars['BigDecimal'];
  readonly worker?: Maybe<Worker>;
};

type SessionEdge = {
  readonly __typename?: 'SessionEdge';
  readonly cursor: Scalars['String'];
  readonly node: Session;
};

const SessionOrderByInput = {
  CoolingDownStartTimeAsc: 'coolingDownStartTime_ASC',
  CoolingDownStartTimeDesc: 'coolingDownStartTime_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  IsBoundAsc: 'isBound_ASC',
  IsBoundDesc: 'isBound_DESC',
  PInitAsc: 'pInit_ASC',
  PInitDesc: 'pInit_DESC',
  PInstantAsc: 'pInstant_ASC',
  PInstantDesc: 'pInstant_DESC',
  StakePoolCapacityAsc: 'stakePool_capacity_ASC',
  StakePoolCapacityDesc: 'stakePool_capacity_DESC',
  StakePoolDelegableAsc: 'stakePool_delegable_ASC',
  StakePoolDelegableDesc: 'stakePool_delegable_DESC',
  StakePoolIdAsc: 'stakePool_id_ASC',
  StakePoolIdDesc: 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc: 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc: 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc: 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc: 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc: 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc: 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc: 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc: 'stakePool_workerCount_DESC',
  StakeAsc: 'stake_ASC',
  StakeDesc: 'stake_DESC',
  StateAsc: 'state_ASC',
  StateDesc: 'state_DESC',
  TotalRewardAsc: 'totalReward_ASC',
  TotalRewardDesc: 'totalReward_DESC',
  VAsc: 'v_ASC',
  VDesc: 'v_DESC',
  VeAsc: 've_ASC',
  VeDesc: 've_DESC',
  WorkerConfidenceLevelAsc: 'worker_confidenceLevel_ASC',
  WorkerConfidenceLevelDesc: 'worker_confidenceLevel_DESC',
  WorkerIdAsc: 'worker_id_ASC',
  WorkerIdDesc: 'worker_id_DESC',
  WorkerInitialScoreAsc: 'worker_initialScore_ASC',
  WorkerInitialScoreDesc: 'worker_initialScore_DESC',
  WorkerSharesAsc: 'worker_shares_ASC',
  WorkerSharesDesc: 'worker_shares_DESC'
} as const;

export type SessionOrderByInput = typeof SessionOrderByInput[keyof typeof SessionOrderByInput];
type SessionWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<SessionWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<SessionWhereInput>>;
  readonly coolingDownStartTime_eq?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_gt?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_gte?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly coolingDownStartTime_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly coolingDownStartTime_lt?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_lte?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_not_eq?: InputMaybe<Scalars['DateTime']>;
  readonly coolingDownStartTime_not_in?: InputMaybe<ReadonlyArray<Scalars['DateTime']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly isBound_eq?: InputMaybe<Scalars['Boolean']>;
  readonly isBound_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly isBound_not_eq?: InputMaybe<Scalars['Boolean']>;
  readonly pInit_eq?: InputMaybe<Scalars['Int']>;
  readonly pInit_gt?: InputMaybe<Scalars['Int']>;
  readonly pInit_gte?: InputMaybe<Scalars['Int']>;
  readonly pInit_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly pInit_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly pInit_lt?: InputMaybe<Scalars['Int']>;
  readonly pInit_lte?: InputMaybe<Scalars['Int']>;
  readonly pInit_not_eq?: InputMaybe<Scalars['Int']>;
  readonly pInit_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly pInstant_eq?: InputMaybe<Scalars['Int']>;
  readonly pInstant_gt?: InputMaybe<Scalars['Int']>;
  readonly pInstant_gte?: InputMaybe<Scalars['Int']>;
  readonly pInstant_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly pInstant_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly pInstant_lt?: InputMaybe<Scalars['Int']>;
  readonly pInstant_lte?: InputMaybe<Scalars['Int']>;
  readonly pInstant_not_eq?: InputMaybe<Scalars['Int']>;
  readonly pInstant_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly stakePool?: InputMaybe<StakePoolWhereInput>;
  readonly stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly stake_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stake_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly stake_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly stake_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly state_eq?: InputMaybe<WorkerState>;
  readonly state_in?: InputMaybe<ReadonlyArray<WorkerState>>;
  readonly state_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly state_not_eq?: InputMaybe<WorkerState>;
  readonly state_not_in?: InputMaybe<ReadonlyArray<WorkerState>>;
  readonly totalReward_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly totalReward_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly totalReward_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly totalReward_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly v_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly v_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly v_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly v_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly ve_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly ve_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly ve_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly ve_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly worker?: InputMaybe<WorkerWhereInput>;
  readonly worker_isNull?: InputMaybe<Scalars['Boolean']>;
};

type SessionsConnection = {
  readonly __typename?: 'SessionsConnection';
  readonly edges: ReadonlyArray<SessionEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type SquidStatus = {
  readonly __typename?: 'SquidStatus';
  /** The height of the processed part of the chain */
  readonly height?: Maybe<Scalars['Int']>;
};

type StakePool = {
  readonly __typename?: 'StakePool';
  readonly basePool: BasePool;
  /** null means infinite */
  readonly capacity?: Maybe<Scalars['BigDecimal']>;
  /** null means infinite */
  readonly delegable?: Maybe<Scalars['BigDecimal']>;
  /** pid */
  readonly id: Scalars['String'];
  readonly idleWorkerCount: Scalars['Int'];
  readonly idleWorkerShares: Scalars['BigDecimal'];
  readonly ownerReward: Scalars['BigDecimal'];
  readonly workerCount: Scalars['Int'];
  readonly workers: ReadonlyArray<Worker>;
};


type StakePoolWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<WorkerOrderByInput>>;
  where?: InputMaybe<WorkerWhereInput>;
};

type StakePoolEdge = {
  readonly __typename?: 'StakePoolEdge';
  readonly cursor: Scalars['String'];
  readonly node: StakePool;
};

const StakePoolOrderByInput = {
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  CapacityAsc: 'capacity_ASC',
  CapacityDesc: 'capacity_DESC',
  DelegableAsc: 'delegable_ASC',
  DelegableDesc: 'delegable_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  IdleWorkerCountAsc: 'idleWorkerCount_ASC',
  IdleWorkerCountDesc: 'idleWorkerCount_DESC',
  IdleWorkerSharesAsc: 'idleWorkerShares_ASC',
  IdleWorkerSharesDesc: 'idleWorkerShares_DESC',
  OwnerRewardAsc: 'ownerReward_ASC',
  OwnerRewardDesc: 'ownerReward_DESC',
  WorkerCountAsc: 'workerCount_ASC',
  WorkerCountDesc: 'workerCount_DESC'
} as const;

export type StakePoolOrderByInput = typeof StakePoolOrderByInput[keyof typeof StakePoolOrderByInput];
type StakePoolWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<StakePoolWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<StakePoolWhereInput>>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly capacity_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly capacity_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly capacity_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly capacity_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly delegable_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly delegable_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly delegable_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly delegable_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly idleWorkerCount_eq?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_gt?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_gte?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly idleWorkerCount_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly idleWorkerCount_lt?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_lte?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_not_eq?: InputMaybe<Scalars['Int']>;
  readonly idleWorkerCount_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly idleWorkerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly idleWorkerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly idleWorkerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly idleWorkerShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly ownerReward_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly ownerReward_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly ownerReward_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly ownerReward_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly workerCount_eq?: InputMaybe<Scalars['Int']>;
  readonly workerCount_gt?: InputMaybe<Scalars['Int']>;
  readonly workerCount_gte?: InputMaybe<Scalars['Int']>;
  readonly workerCount_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly workerCount_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly workerCount_lt?: InputMaybe<Scalars['Int']>;
  readonly workerCount_lte?: InputMaybe<Scalars['Int']>;
  readonly workerCount_not_eq?: InputMaybe<Scalars['Int']>;
  readonly workerCount_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly workers_every?: InputMaybe<WorkerWhereInput>;
  readonly workers_none?: InputMaybe<WorkerWhereInput>;
  readonly workers_some?: InputMaybe<WorkerWhereInput>;
};

type StakePoolsConnection = {
  readonly __typename?: 'StakePoolsConnection';
  readonly edges: ReadonlyArray<StakePoolEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type Subscription = {
  readonly __typename?: 'Subscription';
  readonly accountById?: Maybe<Account>;
  readonly accounts: ReadonlyArray<Account>;
  readonly basePoolAprRecordById?: Maybe<BasePoolAprRecord>;
  readonly basePoolAprRecords: ReadonlyArray<BasePoolAprRecord>;
  readonly basePoolById?: Maybe<BasePool>;
  readonly basePoolWhitelistById?: Maybe<BasePoolWhitelist>;
  readonly basePoolWhitelists: ReadonlyArray<BasePoolWhitelist>;
  readonly basePools: ReadonlyArray<BasePool>;
  readonly delegationById?: Maybe<Delegation>;
  readonly delegationValueRecordById?: Maybe<DelegationValueRecord>;
  readonly delegationValueRecords: ReadonlyArray<DelegationValueRecord>;
  readonly delegations: ReadonlyArray<Delegation>;
  readonly globalStateById?: Maybe<GlobalState>;
  readonly globalStates: ReadonlyArray<GlobalState>;
  readonly nftById?: Maybe<Nft>;
  readonly nfts: ReadonlyArray<Nft>;
  readonly rewardRecordById?: Maybe<RewardRecord>;
  readonly rewardRecords: ReadonlyArray<RewardRecord>;
  readonly sessionById?: Maybe<Session>;
  readonly sessions: ReadonlyArray<Session>;
  readonly stakePoolById?: Maybe<StakePool>;
  readonly stakePools: ReadonlyArray<StakePool>;
  readonly vaultById?: Maybe<Vault>;
  readonly vaults: ReadonlyArray<Vault>;
  readonly workerById?: Maybe<Worker>;
  readonly workers: ReadonlyArray<Worker>;
};


type SubscriptionAccountByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionAccountsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<AccountOrderByInput>>;
  where?: InputMaybe<AccountWhereInput>;
};


type SubscriptionBasePoolAprRecordByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionBasePoolAprRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolAprRecordOrderByInput>>;
  where?: InputMaybe<BasePoolAprRecordWhereInput>;
};


type SubscriptionBasePoolByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionBasePoolWhitelistByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionBasePoolWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolWhitelistOrderByInput>>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
};


type SubscriptionBasePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<BasePoolOrderByInput>>;
  where?: InputMaybe<BasePoolWhereInput>;
};


type SubscriptionDelegationByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionDelegationValueRecordByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionDelegationValueRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationValueRecordOrderByInput>>;
  where?: InputMaybe<DelegationValueRecordWhereInput>;
};


type SubscriptionDelegationsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<DelegationOrderByInput>>;
  where?: InputMaybe<DelegationWhereInput>;
};


type SubscriptionGlobalStateByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionGlobalStatesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<GlobalStateOrderByInput>>;
  where?: InputMaybe<GlobalStateWhereInput>;
};


type SubscriptionNftByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionNftsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<NftOrderByInput>>;
  where?: InputMaybe<NftWhereInput>;
};


type SubscriptionRewardRecordByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionRewardRecordsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<RewardRecordOrderByInput>>;
  where?: InputMaybe<RewardRecordWhereInput>;
};


type SubscriptionSessionByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionSessionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<SessionOrderByInput>>;
  where?: InputMaybe<SessionWhereInput>;
};


type SubscriptionStakePoolByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionStakePoolsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<StakePoolOrderByInput>>;
  where?: InputMaybe<StakePoolWhereInput>;
};


type SubscriptionVaultByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionVaultsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<VaultOrderByInput>>;
  where?: InputMaybe<VaultWhereInput>;
};


type SubscriptionWorkerByIdArgs = {
  id: Scalars['String'];
};


type SubscriptionWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReadonlyArray<WorkerOrderByInput>>;
  where?: InputMaybe<WorkerWhereInput>;
};

type Vault = {
  readonly __typename?: 'Vault';
  readonly basePool: BasePool;
  readonly claimableOwnerShares: Scalars['BigDecimal'];
  /** pid */
  readonly id: Scalars['String'];
  /** share price of owner's last gain */
  readonly lastSharePriceCheckpoint: Scalars['BigDecimal'];
};

type VaultEdge = {
  readonly __typename?: 'VaultEdge';
  readonly cursor: Scalars['String'];
  readonly node: Vault;
};

const VaultOrderByInput = {
  BasePoolAprMultiplierAsc: 'basePool_aprMultiplier_ASC',
  BasePoolAprMultiplierDesc: 'basePool_aprMultiplier_DESC',
  BasePoolCidAsc: 'basePool_cid_ASC',
  BasePoolCidDesc: 'basePool_cid_DESC',
  BasePoolCommissionAsc: 'basePool_commission_ASC',
  BasePoolCommissionDesc: 'basePool_commission_DESC',
  BasePoolDelegatorCountAsc: 'basePool_delegatorCount_ASC',
  BasePoolDelegatorCountDesc: 'basePool_delegatorCount_DESC',
  BasePoolFreeValueAsc: 'basePool_freeValue_ASC',
  BasePoolFreeValueDesc: 'basePool_freeValue_DESC',
  BasePoolIdAsc: 'basePool_id_ASC',
  BasePoolIdDesc: 'basePool_id_DESC',
  BasePoolKindAsc: 'basePool_kind_ASC',
  BasePoolKindDesc: 'basePool_kind_DESC',
  BasePoolPidAsc: 'basePool_pid_ASC',
  BasePoolPidDesc: 'basePool_pid_DESC',
  BasePoolReleasingValueAsc: 'basePool_releasingValue_ASC',
  BasePoolReleasingValueDesc: 'basePool_releasingValue_DESC',
  BasePoolSharePriceAsc: 'basePool_sharePrice_ASC',
  BasePoolSharePriceDesc: 'basePool_sharePrice_DESC',
  BasePoolTotalSharesAsc: 'basePool_totalShares_ASC',
  BasePoolTotalSharesDesc: 'basePool_totalShares_DESC',
  BasePoolTotalValueAsc: 'basePool_totalValue_ASC',
  BasePoolTotalValueDesc: 'basePool_totalValue_DESC',
  BasePoolWhitelistEnabledAsc: 'basePool_whitelistEnabled_ASC',
  BasePoolWhitelistEnabledDesc: 'basePool_whitelistEnabled_DESC',
  BasePoolWithdrawingSharesAsc: 'basePool_withdrawingShares_ASC',
  BasePoolWithdrawingSharesDesc: 'basePool_withdrawingShares_DESC',
  BasePoolWithdrawingValueAsc: 'basePool_withdrawingValue_ASC',
  BasePoolWithdrawingValueDesc: 'basePool_withdrawingValue_DESC',
  ClaimableOwnerSharesAsc: 'claimableOwnerShares_ASC',
  ClaimableOwnerSharesDesc: 'claimableOwnerShares_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  LastSharePriceCheckpointAsc: 'lastSharePriceCheckpoint_ASC',
  LastSharePriceCheckpointDesc: 'lastSharePriceCheckpoint_DESC'
} as const;

export type VaultOrderByInput = typeof VaultOrderByInput[keyof typeof VaultOrderByInput];
type VaultWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<VaultWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<VaultWhereInput>>;
  readonly basePool?: InputMaybe<BasePoolWhereInput>;
  readonly basePool_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly claimableOwnerShares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly claimableOwnerShares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly claimableOwnerShares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly claimableOwnerShares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly lastSharePriceCheckpoint_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly lastSharePriceCheckpoint_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly lastSharePriceCheckpoint_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly lastSharePriceCheckpoint_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
};

type VaultsConnection = {
  readonly __typename?: 'VaultsConnection';
  readonly edges: ReadonlyArray<VaultEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type WhereIdInput = {
  readonly id: Scalars['String'];
};

type Worker = {
  readonly __typename?: 'Worker';
  readonly confidenceLevel: Scalars['Int'];
  /** worker public key */
  readonly id: Scalars['String'];
  readonly initialScore?: Maybe<Scalars['Int']>;
  readonly session?: Maybe<Session>;
  readonly shares?: Maybe<Scalars['BigDecimal']>;
  readonly stakePool?: Maybe<StakePool>;
};

type WorkerEdge = {
  readonly __typename?: 'WorkerEdge';
  readonly cursor: Scalars['String'];
  readonly node: Worker;
};

const WorkerOrderByInput = {
  ConfidenceLevelAsc: 'confidenceLevel_ASC',
  ConfidenceLevelDesc: 'confidenceLevel_DESC',
  IdAsc: 'id_ASC',
  IdDesc: 'id_DESC',
  InitialScoreAsc: 'initialScore_ASC',
  InitialScoreDesc: 'initialScore_DESC',
  SessionCoolingDownStartTimeAsc: 'session_coolingDownStartTime_ASC',
  SessionCoolingDownStartTimeDesc: 'session_coolingDownStartTime_DESC',
  SessionIdAsc: 'session_id_ASC',
  SessionIdDesc: 'session_id_DESC',
  SessionIsBoundAsc: 'session_isBound_ASC',
  SessionIsBoundDesc: 'session_isBound_DESC',
  SessionPInitAsc: 'session_pInit_ASC',
  SessionPInitDesc: 'session_pInit_DESC',
  SessionPInstantAsc: 'session_pInstant_ASC',
  SessionPInstantDesc: 'session_pInstant_DESC',
  SessionStakeAsc: 'session_stake_ASC',
  SessionStakeDesc: 'session_stake_DESC',
  SessionStateAsc: 'session_state_ASC',
  SessionStateDesc: 'session_state_DESC',
  SessionTotalRewardAsc: 'session_totalReward_ASC',
  SessionTotalRewardDesc: 'session_totalReward_DESC',
  SessionVAsc: 'session_v_ASC',
  SessionVDesc: 'session_v_DESC',
  SessionVeAsc: 'session_ve_ASC',
  SessionVeDesc: 'session_ve_DESC',
  SharesAsc: 'shares_ASC',
  SharesDesc: 'shares_DESC',
  StakePoolCapacityAsc: 'stakePool_capacity_ASC',
  StakePoolCapacityDesc: 'stakePool_capacity_DESC',
  StakePoolDelegableAsc: 'stakePool_delegable_ASC',
  StakePoolDelegableDesc: 'stakePool_delegable_DESC',
  StakePoolIdAsc: 'stakePool_id_ASC',
  StakePoolIdDesc: 'stakePool_id_DESC',
  StakePoolIdleWorkerCountAsc: 'stakePool_idleWorkerCount_ASC',
  StakePoolIdleWorkerCountDesc: 'stakePool_idleWorkerCount_DESC',
  StakePoolIdleWorkerSharesAsc: 'stakePool_idleWorkerShares_ASC',
  StakePoolIdleWorkerSharesDesc: 'stakePool_idleWorkerShares_DESC',
  StakePoolOwnerRewardAsc: 'stakePool_ownerReward_ASC',
  StakePoolOwnerRewardDesc: 'stakePool_ownerReward_DESC',
  StakePoolWorkerCountAsc: 'stakePool_workerCount_ASC',
  StakePoolWorkerCountDesc: 'stakePool_workerCount_DESC'
} as const;

export type WorkerOrderByInput = typeof WorkerOrderByInput[keyof typeof WorkerOrderByInput];
const WorkerState = {
  Ready: 'Ready',
  WorkerCoolingDown: 'WorkerCoolingDown',
  WorkerIdle: 'WorkerIdle',
  WorkerUnresponsive: 'WorkerUnresponsive'
} as const;

export type WorkerState = typeof WorkerState[keyof typeof WorkerState];
type WorkerWhereInput = {
  readonly AND?: InputMaybe<ReadonlyArray<WorkerWhereInput>>;
  readonly OR?: InputMaybe<ReadonlyArray<WorkerWhereInput>>;
  readonly confidenceLevel_eq?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_gt?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_gte?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly confidenceLevel_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly confidenceLevel_lt?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_lte?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_not_eq?: InputMaybe<Scalars['Int']>;
  readonly confidenceLevel_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly id_contains?: InputMaybe<Scalars['String']>;
  readonly id_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_eq?: InputMaybe<Scalars['String']>;
  readonly id_gt?: InputMaybe<Scalars['String']>;
  readonly id_gte?: InputMaybe<Scalars['String']>;
  readonly id_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly id_lt?: InputMaybe<Scalars['String']>;
  readonly id_lte?: InputMaybe<Scalars['String']>;
  readonly id_not_contains?: InputMaybe<Scalars['String']>;
  readonly id_not_containsInsensitive?: InputMaybe<Scalars['String']>;
  readonly id_not_endsWith?: InputMaybe<Scalars['String']>;
  readonly id_not_eq?: InputMaybe<Scalars['String']>;
  readonly id_not_in?: InputMaybe<ReadonlyArray<Scalars['String']>>;
  readonly id_not_startsWith?: InputMaybe<Scalars['String']>;
  readonly id_startsWith?: InputMaybe<Scalars['String']>;
  readonly initialScore_eq?: InputMaybe<Scalars['Int']>;
  readonly initialScore_gt?: InputMaybe<Scalars['Int']>;
  readonly initialScore_gte?: InputMaybe<Scalars['Int']>;
  readonly initialScore_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly initialScore_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly initialScore_lt?: InputMaybe<Scalars['Int']>;
  readonly initialScore_lte?: InputMaybe<Scalars['Int']>;
  readonly initialScore_not_eq?: InputMaybe<Scalars['Int']>;
  readonly initialScore_not_in?: InputMaybe<ReadonlyArray<Scalars['Int']>>;
  readonly session?: InputMaybe<SessionWhereInput>;
  readonly session_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly shares_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly shares_isNull?: InputMaybe<Scalars['Boolean']>;
  readonly shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_not_eq?: InputMaybe<Scalars['BigDecimal']>;
  readonly shares_not_in?: InputMaybe<ReadonlyArray<Scalars['BigDecimal']>>;
  readonly stakePool?: InputMaybe<StakePoolWhereInput>;
  readonly stakePool_isNull?: InputMaybe<Scalars['Boolean']>;
};

type WorkersConnection = {
  readonly __typename?: 'WorkersConnection';
  readonly edges: ReadonlyArray<WorkerEdge>;
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int'];
};

type AccountByIdQueryVariables = Exact<{
  accountId: Scalars['String'];
}>;


type AccountByIdQuery = { readonly __typename?: 'Query', readonly accountById?: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null, readonly stakePoolNftCount: number, readonly stakePoolValue: string, readonly stakePoolAvgAprMultiplier: string, readonly vaultNftCount: number, readonly vaultValue: string, readonly vaultAvgAprMultiplier: string, readonly ownedPools: ReadonlyArray<{ readonly __typename?: 'BasePool', readonly id: string, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly stakePoolNftCount: number, readonly stakePoolValue: string, readonly stakePoolAvgAprMultiplier: string, readonly vaultNftCount: number, readonly vaultValue: string, readonly vaultAvgAprMultiplier: string } }> } | null };

type BasePoolCommonFragment = { readonly __typename?: 'BasePool', readonly cid: number, readonly commission: string, readonly delegatorCount: number, readonly freeValue: string, readonly id: string, readonly kind: BasePoolKind, readonly aprMultiplier: string, readonly pid: string, readonly releasingValue: string, readonly sharePrice: string, readonly totalShares: string, readonly totalValue: string, readonly whitelistEnabled: boolean, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly stakePoolNftCount: number, readonly stakePoolValue: string }, readonly owner: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null }, readonly stakePool?: { readonly __typename?: 'StakePool', readonly capacity?: string | null, readonly delegable?: string | null, readonly idleWorkerCount: number, readonly ownerReward: string, readonly workerCount: number } | null, readonly vault?: { readonly __typename?: 'Vault', readonly claimableOwnerShares: string, readonly lastSharePriceCheckpoint: string } | null };

type BasePoolByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type BasePoolByIdQuery = { readonly __typename?: 'Query', readonly basePoolById?: { readonly __typename?: 'BasePool', readonly cid: number, readonly commission: string, readonly delegatorCount: number, readonly freeValue: string, readonly id: string, readonly kind: BasePoolKind, readonly aprMultiplier: string, readonly pid: string, readonly releasingValue: string, readonly sharePrice: string, readonly totalShares: string, readonly totalValue: string, readonly whitelistEnabled: boolean, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly stakePoolNftCount: number, readonly stakePoolValue: string }, readonly owner: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null }, readonly stakePool?: { readonly __typename?: 'StakePool', readonly capacity?: string | null, readonly delegable?: string | null, readonly idleWorkerCount: number, readonly ownerReward: string, readonly workerCount: number } | null, readonly vault?: { readonly __typename?: 'Vault', readonly claimableOwnerShares: string, readonly lastSharePriceCheckpoint: string } | null } | null };

type BasePoolsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<BasePoolOrderByInput> | BasePoolOrderByInput;
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  where?: InputMaybe<BasePoolWhereInput>;
}>;


type BasePoolsConnectionQuery = { readonly __typename?: 'Query', readonly basePoolsConnection: { readonly __typename?: 'BasePoolsConnection', readonly totalCount: number, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly endCursor: string, readonly hasNextPage: boolean, readonly hasPreviousPage: boolean, readonly startCursor: string }, readonly edges: ReadonlyArray<{ readonly __typename?: 'BasePoolEdge', readonly cursor: string, readonly node: { readonly __typename?: 'BasePool', readonly cid: number, readonly commission: string, readonly delegatorCount: number, readonly freeValue: string, readonly id: string, readonly kind: BasePoolKind, readonly aprMultiplier: string, readonly pid: string, readonly releasingValue: string, readonly sharePrice: string, readonly totalShares: string, readonly totalValue: string, readonly whitelistEnabled: boolean, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly stakePoolNftCount: number, readonly stakePoolValue: string }, readonly owner: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null }, readonly stakePool?: { readonly __typename?: 'StakePool', readonly capacity?: string | null, readonly delegable?: string | null, readonly idleWorkerCount: number, readonly ownerReward: string, readonly workerCount: number } | null, readonly vault?: { readonly __typename?: 'Vault', readonly claimableOwnerShares: string, readonly lastSharePriceCheckpoint: string } | null } }> } };

type ClaimableStakePoolsQueryVariables = Exact<{
  accountId?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['BigDecimal']>;
}>;


type ClaimableStakePoolsQuery = { readonly __typename?: 'Query', readonly basePoolsConnection: { readonly __typename?: 'BasePoolsConnection', readonly edges: ReadonlyArray<{ readonly __typename?: 'BasePoolEdge', readonly node: { readonly __typename?: 'BasePool', readonly id: string, readonly stakePool?: { readonly __typename?: 'StakePool', readonly ownerReward: string } | null } }> } };

type OwnedVaultsQueryVariables = Exact<{
  accountId?: InputMaybe<Scalars['String']>;
}>;


type OwnedVaultsQuery = { readonly __typename?: 'Query', readonly basePoolsConnection: { readonly __typename?: 'BasePoolsConnection', readonly edges: ReadonlyArray<{ readonly __typename?: 'BasePoolEdge', readonly node: { readonly __typename?: 'BasePool', readonly id: string, readonly totalShares: string, readonly sharePrice: string, readonly commission: string, readonly vault?: { readonly __typename?: 'Vault', readonly claimableOwnerShares: string, readonly lastSharePriceCheckpoint: string } | null } }> } };

type BasePoolAprRecordsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<BasePoolAprRecordOrderByInput> | BasePoolAprRecordOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BasePoolAprRecordWhereInput>;
}>;


type BasePoolAprRecordsConnectionQuery = { readonly __typename?: 'Query', readonly basePoolAprRecordsConnection: { readonly __typename?: 'BasePoolAprRecordsConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'BasePoolAprRecordEdge', readonly cursor: string, readonly node: { readonly __typename?: 'BasePoolAprRecord', readonly id: string, readonly updatedTime: string, readonly value: string } }> } };

type DelegationCommonFragment = { readonly __typename?: 'Delegation', readonly id: string, readonly shares: string, readonly value: string, readonly withdrawalStartTime?: string | null, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly basePool: { readonly __typename?: 'BasePool', readonly id: string, readonly kind: BasePoolKind, readonly freeValue: string, readonly sharePrice: string, readonly aprMultiplier: string, readonly withdrawingShares: string }, readonly delegationNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly withdrawalNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null } };

type DelegationByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type DelegationByIdQuery = { readonly __typename?: 'Query', readonly delegationById?: { readonly __typename?: 'Delegation', readonly id: string, readonly shares: string, readonly value: string, readonly withdrawalStartTime?: string | null, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly basePool: { readonly __typename?: 'BasePool', readonly id: string, readonly kind: BasePoolKind, readonly freeValue: string, readonly sharePrice: string, readonly aprMultiplier: string, readonly withdrawingShares: string }, readonly delegationNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly withdrawalNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null } } | null };

type DelegationsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<DelegationOrderByInput> | DelegationOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DelegationWhereInput>;
}>;


type DelegationsConnectionQuery = { readonly __typename?: 'Query', readonly delegationsConnection: { readonly __typename?: 'DelegationsConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'DelegationEdge', readonly cursor: string, readonly node: { readonly __typename?: 'Delegation', readonly id: string, readonly shares: string, readonly value: string, readonly withdrawalStartTime?: string | null, readonly withdrawingShares: string, readonly withdrawingValue: string, readonly basePool: { readonly __typename?: 'BasePool', readonly id: string, readonly kind: BasePoolKind, readonly freeValue: string, readonly sharePrice: string, readonly aprMultiplier: string, readonly withdrawingShares: string }, readonly delegationNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly withdrawalNft?: { readonly __typename?: 'Nft', readonly cid: number, readonly nftId: number } | null, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null } } }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly endCursor: string, readonly hasNextPage: boolean, readonly hasPreviousPage: boolean, readonly startCursor: string } } };

type DelegationValueRecordsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<DelegationValueRecordOrderByInput> | DelegationValueRecordOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DelegationValueRecordWhereInput>;
}>;


type DelegationValueRecordsConnectionQuery = { readonly __typename?: 'Query', readonly delegationValueRecordsConnection: { readonly __typename?: 'DelegationValueRecordsConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'DelegationValueRecordEdge', readonly cursor: string, readonly node: { readonly __typename?: 'DelegationValueRecord', readonly id: string, readonly updatedTime: string, readonly value: string } }> } };

type GlobalStateQueryVariables = Exact<{ [key: string]: never; }>;


type GlobalStateQuery = { readonly __typename?: 'Query', readonly squidStatus?: { readonly __typename?: 'SquidStatus', readonly height?: number | null } | null, readonly globalStateById?: { readonly __typename?: 'GlobalState', readonly averageBlockTime: number, readonly averageAprMultiplier: string, readonly height: number, readonly totalValue: string, readonly idleWorkerShares: string } | null };

type RewardRecordsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<RewardRecordOrderByInput> | RewardRecordOrderByInput;
  where?: InputMaybe<RewardRecordWhereInput>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
}>;


type RewardRecordsConnectionQuery = { readonly __typename?: 'Query', readonly rewardRecordsConnection: { readonly __typename?: 'RewardRecordsConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'RewardRecordEdge', readonly node: { readonly __typename?: 'RewardRecord', readonly id: string, readonly time: string, readonly value: string } }> } };

type BasePoolWhitelistsConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<BasePoolWhitelistOrderByInput> | BasePoolWhitelistOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BasePoolWhitelistWhereInput>;
}>;


type BasePoolWhitelistsConnectionQuery = { readonly __typename?: 'Query', readonly basePoolWhitelistsConnection: { readonly __typename?: 'BasePoolWhitelistsConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'BasePoolWhitelistEdge', readonly cursor: string, readonly node: { readonly __typename?: 'BasePoolWhitelist', readonly createTime: string, readonly id: string, readonly account: { readonly __typename?: 'Account', readonly id: string, readonly identityDisplay?: string | null, readonly identityLevel?: IdentityLevel | null } } }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly endCursor: string, readonly hasNextPage: boolean, readonly hasPreviousPage: boolean, readonly startCursor: string } } };

type WorkersConnectionQueryVariables = Exact<{
  orderBy: ReadonlyArray<WorkerOrderByInput> | WorkerOrderByInput;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WorkerWhereInput>;
}>;


type WorkersConnectionQuery = { readonly __typename?: 'Query', readonly workersConnection: { readonly __typename?: 'WorkersConnection', readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly __typename?: 'WorkerEdge', readonly cursor: string, readonly node: { readonly __typename?: 'Worker', readonly id: string, readonly confidenceLevel: number, readonly initialScore?: number | null, readonly shares?: string | null, readonly stakePool?: { readonly __typename?: 'StakePool', readonly id: string, readonly basePool: { readonly __typename?: 'BasePool', readonly freeValue: string } } | null, readonly session?: { readonly __typename?: 'Session', readonly coolingDownStartTime?: string | null, readonly pInit: number, readonly pInstant: number, readonly stake: string, readonly state: WorkerState, readonly totalReward: string, readonly v: string, readonly ve: string } | null } }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly hasPreviousPage: boolean, readonly startCursor: string, readonly endCursor: string } } };

export const BasePoolCommonFragmentDoc = gql`
    fragment BasePoolCommon on BasePool {
  account {
    id
    stakePoolNftCount
    stakePoolValue
  }
  cid
  commission
  delegatorCount
  freeValue
  id
  kind
  aprMultiplier
  owner {
    id
    identityDisplay
    identityLevel
  }
  pid
  releasingValue
  sharePrice
  totalShares
  totalValue
  whitelistEnabled
  withdrawingShares
  withdrawingValue
  stakePool {
    capacity
    delegable
    idleWorkerCount
    ownerReward
    workerCount
  }
  vault {
    claimableOwnerShares
    lastSharePriceCheckpoint
  }
}
    `;
export const DelegationCommonFragmentDoc = gql`
    fragment DelegationCommon on Delegation {
  basePool {
    id
    kind
    freeValue
    sharePrice
    aprMultiplier
    withdrawingShares
  }
  id
  shares
  value
  withdrawalStartTime
  withdrawingShares
  withdrawingValue
  delegationNft {
    cid
    nftId
  }
  withdrawalNft {
    cid
    nftId
  }
  account {
    id
    identityDisplay
    identityLevel
  }
}
    `;
 const AccountByIdDocument = gql`
    query AccountById($accountId: String!) {
  accountById(id: $accountId) {
    id
    identityDisplay
    identityLevel
    stakePoolNftCount
    stakePoolValue
    stakePoolAvgAprMultiplier
    vaultNftCount
    vaultValue
    vaultAvgAprMultiplier
    ownedPools(where: {kind_eq: Vault}, orderBy: pid_ASC, limit: 99) {
      id
      account {
        id
        stakePoolNftCount
        stakePoolValue
        stakePoolAvgAprMultiplier
        vaultNftCount
        vaultValue
        vaultAvgAprMultiplier
      }
    }
  }
}
    `;
 const BasePoolByIdDocument = gql`
    query BasePoolById($id: String!) {
  basePoolById(id: $id) {
    ...BasePoolCommon
  }
}
    ${BasePoolCommonFragmentDoc}`;
 const BasePoolsConnectionDocument = gql`
    query BasePoolsConnection($orderBy: [BasePoolOrderByInput!]!, $first: Int, $after: String, $where: BasePoolWhereInput) {
  basePoolsConnection(
    orderBy: $orderBy
    first: $first
    after: $after
    where: $where
  ) {
    totalCount
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    edges {
      node {
        ...BasePoolCommon
      }
      cursor
    }
  }
}
    ${BasePoolCommonFragmentDoc}`;
 const ClaimableStakePoolsDocument = gql`
    query ClaimableStakePools($accountId: String, $gt: BigDecimal) {
  basePoolsConnection(
    orderBy: pid_ASC
    where: {owner: {id_eq: $accountId}, stakePool: {ownerReward_gt: $gt}}
  ) {
    edges {
      node {
        id
        stakePool {
          ownerReward
        }
      }
    }
  }
}
    `;
 const OwnedVaultsDocument = gql`
    query OwnedVaults($accountId: String) {
  basePoolsConnection(
    orderBy: pid_ASC
    where: {owner: {id_eq: $accountId}, kind_eq: Vault}
  ) {
    edges {
      node {
        id
        totalShares
        sharePrice
        vault {
          claimableOwnerShares
          lastSharePriceCheckpoint
        }
        commission
      }
    }
  }
}
    `;
 const BasePoolAprRecordsConnectionDocument = gql`
    query BasePoolAprRecordsConnection($orderBy: [BasePoolAprRecordOrderByInput!]!, $after: String, $first: Int, $where: BasePoolAprRecordWhereInput) {
  basePoolAprRecordsConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    edges {
      node {
        id
        updatedTime
        value
      }
      cursor
    }
    totalCount
  }
}
    `;
 const DelegationByIdDocument = gql`
    query DelegationById($id: String!) {
  delegationById(id: $id) {
    ...DelegationCommon
  }
}
    ${DelegationCommonFragmentDoc}`;
 const DelegationsConnectionDocument = gql`
    query DelegationsConnection($orderBy: [DelegationOrderByInput!]!, $after: String, $first: Int, $where: DelegationWhereInput) {
  delegationsConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    edges {
      cursor
      node {
        ...DelegationCommon
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}
    ${DelegationCommonFragmentDoc}`;
 const DelegationValueRecordsConnectionDocument = gql`
    query DelegationValueRecordsConnection($orderBy: [DelegationValueRecordOrderByInput!]!, $after: String, $first: Int, $where: DelegationValueRecordWhereInput) {
  delegationValueRecordsConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    totalCount
    edges {
      node {
        id
        updatedTime
        value
      }
      cursor
    }
  }
}
    `;
 const GlobalStateDocument = gql`
    query GlobalState {
  squidStatus {
    height
  }
  globalStateById(id: "0") {
    averageBlockTime
    averageAprMultiplier
    height
    totalValue
    idleWorkerShares
  }
}
    `;
 const RewardRecordsConnectionDocument = gql`
    query RewardRecordsConnection($orderBy: [RewardRecordOrderByInput!]!, $where: RewardRecordWhereInput, $after: String, $first: Int) {
  rewardRecordsConnection(
    orderBy: $orderBy
    where: $where
    after: $after
    first: $first
  ) {
    edges {
      node {
        id
        time
        value
      }
    }
    totalCount
  }
}
    `;
 const BasePoolWhitelistsConnectionDocument = gql`
    query BasePoolWhitelistsConnection($orderBy: [BasePoolWhitelistOrderByInput!]!, $after: String, $first: Int, $where: BasePoolWhitelistWhereInput) {
  basePoolWhitelistsConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    edges {
      cursor
      node {
        account {
          id
          identityDisplay
          identityLevel
        }
        createTime
        id
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}
    `;
 const WorkersConnectionDocument = gql`
    query WorkersConnection($orderBy: [WorkerOrderByInput!]!, $after: String, $first: Int, $where: WorkerWhereInput) {
  workersConnection(
    orderBy: $orderBy
    after: $after
    first: $first
    where: $where
  ) {
    edges {
      cursor
      node {
        id
        stakePool {
          id
          basePool {
            freeValue
          }
        }
        session {
          coolingDownStartTime
          pInit
          pInstant
          stake
          state
          totalReward
          v
          ve
        }
        confidenceLevel
        initialScore
        shares
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    AccountById(variables: AccountByIdQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<AccountByIdQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AccountByIdQuery>(AccountByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AccountById', 'query');
    },
    BasePoolById(variables: BasePoolByIdQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BasePoolByIdQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BasePoolByIdQuery>(BasePoolByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'BasePoolById', 'query');
    },
    BasePoolsConnection(variables: BasePoolsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BasePoolsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BasePoolsConnectionQuery>(BasePoolsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'BasePoolsConnection', 'query');
    },
    ClaimableStakePools(variables?: ClaimableStakePoolsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<ClaimableStakePoolsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ClaimableStakePoolsQuery>(ClaimableStakePoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ClaimableStakePools', 'query');
    },
    OwnedVaults(variables?: OwnedVaultsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<OwnedVaultsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<OwnedVaultsQuery>(OwnedVaultsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'OwnedVaults', 'query');
    },
    BasePoolAprRecordsConnection(variables: BasePoolAprRecordsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BasePoolAprRecordsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BasePoolAprRecordsConnectionQuery>(BasePoolAprRecordsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'BasePoolAprRecordsConnection', 'query');
    },
    DelegationById(variables: DelegationByIdQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<DelegationByIdQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<DelegationByIdQuery>(DelegationByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'DelegationById', 'query');
    },
    DelegationsConnection(variables: DelegationsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<DelegationsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<DelegationsConnectionQuery>(DelegationsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'DelegationsConnection', 'query');
    },
    DelegationValueRecordsConnection(variables: DelegationValueRecordsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<DelegationValueRecordsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<DelegationValueRecordsConnectionQuery>(DelegationValueRecordsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'DelegationValueRecordsConnection', 'query');
    },
    GlobalState(variables?: GlobalStateQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GlobalStateQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GlobalStateQuery>(GlobalStateDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GlobalState', 'query');
    },
    RewardRecordsConnection(variables: RewardRecordsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<RewardRecordsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<RewardRecordsConnectionQuery>(RewardRecordsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RewardRecordsConnection', 'query');
    },
    BasePoolWhitelistsConnection(variables: BasePoolWhitelistsConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<BasePoolWhitelistsConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<BasePoolWhitelistsConnectionQuery>(BasePoolWhitelistsConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'BasePoolWhitelistsConnection', 'query');
    },
    WorkersConnection(variables: WorkersConnectionQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<WorkersConnectionQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<WorkersConnectionQuery>(WorkersConnectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'WorkersConnection', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;